*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="foxget.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*<PropValue>
		DataSource = .NULL.
		Height = 0
		Left = 0
		Name = "Dataenvironment"
		Top = 0
		Width = 0
	*</PropValue>

ENDDEFINE

DEFINE CLASS foxget AS vfpxbaseform OF "packages\vfpxframework\vfpxbaselibrary.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblPubDateLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPubDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHomeURLLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHomeURL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescripLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDescrip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblKeywordsLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtKeywords" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdInstall" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUninstall" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUpdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAuthorLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAuthor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVersionLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInstalledVersionLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInstalledVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInstalledDateLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInstalledDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtProgress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstPackages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkShowOnlyInstalled" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDependenciesLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDependencies" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtNotes" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getdependencies		&& Get dependencies for the specified package
		*m: getpackages		&& Creates a cursor of packages
		*m: install		&& Install the selected package
		*m: uninstall		&& Uninstall the selected package
		*m: update		&& Displays the installation progress
		*p: cappfolder		&& The folder the app is running in
		*p: cprojectfolder		&& The project folder
		*p: cworkingfolder		&& A temporary working folder
	*</DefinedPropArrayMethod>

	*<PropValue>
		cappfolder = 
		Caption = "FoxGet"
		cprojectfolder = 
		cworkingfolder = 
		DataSession = 2
		DoCreate = .T.
		Height = 653
		Icon = foxget.ico
		Name = "FOXGET"
		Width = 816
		_memberdata = <VFPData>
			<memberdata name="update" display="Update"/>
			<memberdata name="getpackages" display="GetPackages"/>
			<memberdata name="cworkingfolder" display="cWorkingFolder"/>
			<memberdata name="cprojectfolder" display="cProjectFolder"/>
			<memberdata name="uninstall" display="Uninstall"/>
			<memberdata name="install" display="Install"/>
			<memberdata name="getdependencies" display="GetDependencies"/>
			<memberdata name="cappfolder" display="cAppFolder"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'chkShowOnlyInstalled' AS vfpxbasecheckbox WITH ;
		Alignment = 0, ;
		Caption = "Show only installed packages", ;
		Left = 10, ;
		Name = "chkShowOnlyInstalled", ;
		Top = 13
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdInstall' AS vfpxbasecommandbutton WITH ;
		Caption = "Install", ;
		Left = 385, ;
		Name = "cmdInstall", ;
		Top = 393
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdUninstall' AS vfpxbasecommandbutton WITH ;
		Caption = "Uninstall", ;
		Left = 485, ;
		Name = "cmdUninstall", ;
		Top = 393
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdUpdate' AS vfpxbasecommandbutton WITH ;
		Caption = "Update", ;
		Left = 585, ;
		Name = "cmdUpdate", ;
		Top = 393
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtDescrip' AS vfpxbaseeditbox WITH ;
		BorderStyle = 0, ;
		ControlSource = "curPackages.Descrip", ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 60, ;
		Left = 383, ;
		Name = "edtDescrip", ;
		ScrollBars = 0, ;
		Top = 60, ;
		Width = 420
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtKeywords' AS vfpxbaseeditbox WITH ;
		BorderStyle = 0, ;
		ControlSource = "curPackages.Keywords", ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 34, ;
		Left = 483, ;
		Name = "edtKeywords", ;
		ScrollBars = 0, ;
		Top = 127, ;
		Width = 322
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtNotes' AS vfpxbaseeditbox WITH ;
		BorderStyle = 0, ;
		ControlSource = "curPackages.Notes", ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 60, ;
		Left = 383, ;
		Name = "edtNotes", ;
		ScrollBars = 0, ;
		Top = 325, ;
		Width = 420
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtProgress' AS vfpxbaseeditbox WITH ;
		Height = 200, ;
		Left = 10, ;
		Name = "edtProgress", ;
		Top = 445, ;
		Width = 795
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblAuthor' AS vfpxbaselabel WITH ;
		Caption = "Author", ;
		Left = 485, ;
		Name = "lblAuthor", ;
		Top = 165
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblAuthorLabel' AS vfpxbaselabel WITH ;
		Caption = "Author:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblAuthorLabel", ;
		Top = 165
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblDependencies' AS vfpxbaselabel WITH ;
		Caption = "Dependencies", ;
		Left = 485, ;
		Name = "lblDependencies", ;
		Top = 225
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblDependenciesLabel' AS vfpxbaselabel WITH ;
		Caption = "Dependencies:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblDependenciesLabel", ;
		Top = 225
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblDescripLabel' AS vfpxbaselabel WITH ;
		Caption = "Description:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblDescripLabel", ;
		Top = 40
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblHomeURL' AS vfpxbaselabel WITH ;
		Caption = "HomeURL", ;
		ForeColor = 0,0,255, ;
		Left = 485, ;
		MousePointer = 15, ;
		Name = "lblHomeURL", ;
		Top = 245
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblHomeURLLabel' AS vfpxbaselabel WITH ;
		Caption = "Project URL:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblHomeURLLabel", ;
		Top = 245
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblInstalledDate' AS vfpxbaselabel WITH ;
		Caption = "Installed On", ;
		Left = 485, ;
		Name = "lblInstalledDate", ;
		Top = 285
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblInstalledDateLabel' AS vfpxbaselabel WITH ;
		Caption = "Installed on:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblInstalledDateLabel", ;
		Top = 285
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblInstalledVersion' AS vfpxbaselabel WITH ;
		Caption = "Version", ;
		Left = 485, ;
		Name = "lblInstalledVersion", ;
		Top = 265
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblInstalledVersionLabel' AS vfpxbaselabel WITH ;
		Caption = "Installed version:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblInstalledVersionLabel", ;
		Top = 265
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblKeywordsLabel' AS vfpxbaselabel WITH ;
		Caption = "Tags:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblKeywordsLabel", ;
		Top = 129
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblNotes' AS vfpxbaselabel WITH ;
		Caption = "Notes:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblNotes", ;
		Top = 305
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblPubDate' AS vfpxbaselabel WITH ;
		Caption = "PubDate", ;
		Left = 485, ;
		Name = "lblPubDate", ;
		Top = 185
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblPubDateLabel' AS vfpxbaselabel WITH ;
		Caption = "Date published:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblPubDateLabel", ;
		Top = 185
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblSearch' AS vfpxbaselabel WITH ;
		Caption = "Search:", ;
		Left = 220, ;
		Name = "lblSearch", ;
		Top = 13
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblVersion' AS vfpxbaselabel WITH ;
		Caption = "Version", ;
		Left = 485, ;
		Name = "lblVersion", ;
		Top = 205
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lblVersionLabel' AS vfpxbaselabel WITH ;
		Caption = "Version:", ;
		FontBold = .T., ;
		Left = 385, ;
		Name = "lblVersionLabel", ;
		Top = 205
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'lstPackages' AS vfpxbaselistbox WITH ;
		Height = 378, ;
		Left = 10, ;
		Name = "lstPackages", ;
		Top = 42, ;
		Width = 360
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="listbox" />

	ADD OBJECT 'txtSearch' AS vfpxbasetextbox WITH ;
		Height = 23, ;
		Left = 265, ;
		Name = "txtSearch", ;
		Top = 10, ;
		Width = 270
		*< END OBJECT: ClassLib="packages\vfpxframework\vfpxbaselibrary.vcx" BaseClass="textbox" />
	
	PROCEDURE Destroy
		release procedure foxget
		dodefault()
		
	ENDPROC

	PROCEDURE getdependencies		&& Get dependencies for the specified package
		lparameters tcPackage, ;
			tcDependencies
		local lcDependencies, ;
			lnRecno
		lcDependencies = tcDependencies + iif(empty(tcDependencies), '', ',') + ;
			tcPackage
		select curPackages
		lnRecno = recno()
		locate for Name = tcPackage
		if not empty(curPackages.Dependent)
			lcDependencies = This.GetDependencies(curPackages.Dependent, lcDependencies)
		endif not empty(curPackages.Dependent)
		go lnRecno
		return lcDependencies
		
	ENDPROC

	PROCEDURE getpackages		&& Creates a cursor of packages
		* Create a cursor of installed packages.
		
		local lcPackagesFile, ;
			lcJoin, ;
			lcSearch, ;
			lcWhere
		lcPackagesFile = This.cProjectFolder + 'packages\packages.dbf'
		if file(lcPackagesFile)
			use (lcPackagesFile) alias Installed in 0
		endif file(lcPackagesFile)
		if not used('Installed')
			create cursor Installed (Name C(1), Version C(1), Date D, RefCount I)
		endif not used('Installed')
		
		* Join FoxGetPackages and MyPackages.
		
		select * ;
			from FoxGetPackages ;
		union all ;
		select * ;
			from MyPackages ;
			into cursor MyFoxGetPackages
		
		* Create a cursor of all or just installed packages, supporting a search string.
		
		lcJoin   = iif(This.chkShowOnlyInstalled.Value, 'inner', 'left outer')
		lcSearch = iif(empty(This.txtSearch.Value), '', "'%" + lower(alltrim(This.txtSearch.Value)) + "%'")
		lcWhere  = iif(empty(lcSearch), '', 'where lower(MyFoxGetPackages.Keywords) like ' + lcSearch + ;
			' or lower(MyFoxGetPackages.Descrip) like ' + lcSearch + ;
			' or lower(MyFoxGetPackages.Name) like ' + lcSearch)
		select MyFoxGetPackages.Name, ;
				Installed.Version as InstalledVersion, ;
				Installed.Date as InstalledDate, ;
				MyFoxGetPackages.Author, ;
				MyFoxGetPackages.Descrip, ;
				MyFoxGetPackages.Keywords, ;
				MyFoxGetPackages.Version, ;
				MyFoxGetPackages.PubDate, ;
				MyFoxGetPackages.HomeURL, ;
				MyFoxGetPackages.InstallURL, ;
				MyFoxGetPackages.Dependent, ;
				MyFoxGetPackages.Notes, ;
				Installed.RefCount ;
			from MyFoxGetPackages ;
			&lcJoin join Installed on upper(Installed.Name) = upper(MyFoxGetPackages.Name) ;
			&lcWhere ;
			into cursor curPackages
		use in Installed
		select Name, upper(Name) ;
			from curPackages ;
			order by 2 ;
			into array This.lstPackages.aItems
		This.lstPackages.Requery()
		
		* Position the cursor to the selected package.
		
		if This.lstPackages.ListIndex > 0
			This.lstPackages.AnyChange()
		endif This.lstPackages.ListIndex > 0
		
	ENDPROC

	PROCEDURE Init
		local llOK, ;
			lcPackagesFile, ;
			loFiles, ;
			loFile, ;
			loException as Exception, ;
			loInternet
		dodefault()
		
		* Set BorderStyle to non-resizable; we do it here rather than in the Property
		* window so the form is resizable at design time.
		
		This.BorderStyle = 2
		
		* Get a reference to the active project; bug out if there isn't one.
		
		if type('_vfp.ActiveProject') <> 'O'
			messagebox('There is no active project. FoxGet requires an active project to add packages to.', ;
				16, 'FoxGet')
			return .F.
		endif type('_vfp.ActiveProject') <> 'O'
		This.cProjectFolder = addbs(justpath(_vfp.ActiveProject.Name))
			&& we use Name not HomeDir since HomeDir could point to an older location
		
		* Create a folder for working files.
		
		llOK = .T.
		This.cWorkingFolder = addbs(sys(2023)) + 'FoxGet\'
		if not directory(This.cWorkingFolder)
			try
				md (This.cWorkingFolder)
			catch to loException
				messagebox('Cannot create ' + This.cWorkingFolder + ': ' + loException.Message, ;
					16, 'FoxGet')
				llOK = .F.
			endtry
		endif not directory(This.cWorkingFolder)
		if not llOK
			return .F.
		endif not llOK
		
		* Download the FoxGet packages list.
		
		set procedure to foxget additive
		loInternet  = newobject('VFPXInternet', 'VFPXInternet.prg')
		lcURL       = 'https://raw.githubusercontent.com/DougHennig/FoxGet/main/Installers/foxgetpackages.dbf'
		lcLocalFile = This.cWorkingFolder + 'foxgetpackages.dbf'
		llOK = loInternet.DownloadFile(lcURL, lcLocalFile)
		if not llOK
			messagebox(loInternet.cErrorMessage, 16, 'FoxGet')
			return .F.
		endif not llOK
		lcURL       = 'https://raw.githubusercontent.com/DougHennig/FoxGet/main/Installers/foxgetpackages.fpt'
		lcLocalFile = This.cWorkingFolder + 'foxgetpackages.fpt'
		llOK = loInternet.DownloadFile(lcURL, lcLocalFile)
		if not llOK
			messagebox(loInternet.cErrorMessage, 16, 'FoxGet')
			return .F.
		endif not llOK
		use (This.cWorkingFolder + 'foxgetpackages')
		
		* Create MyPackages if it doesn't exist.
		
		This.cAppFolder = addbs(justpath(getwordnum(sys(16), 3)))
		if not file(This.cAppFolder + 'MyPackages.dbf')
			copy structure to (This.cAppFolder + 'MyPackages.dbf')
		endif not file(This.cAppFolder + 'MyPackages.dbf')
		use (This.cAppFolder + 'MyPackages.dbf') in 0
		
		* Populate the listbox.
		
		This.GetPackages()
		This.lstPackages.ListIndex = 1
		
		* Declare the ShellExecute function.
		
		declare integer ShellExecute in Shell32.dll ;
			integer hwnd, ;
			string lpVerb, ;
			string lpFile, ;
			string lpParameters, ;
			string lpDirectory, ;
			long nShowCmd
		
	ENDPROC

	PROCEDURE install		&& Install the selected package
		* Install the current or specified package.
		
		lparameters tcPackage
		local llDependency, ;
			lnRecno, ;
			lcInstaller, ;
			loFiles, ;
			loFile, ;
			loInternet, ;
			llOK, ;
			loInstaller, ;
			laDependencies[1], ;
			lnDependencies, ;
			lcPackage
		
		* Find the specified package.
		
		llDependency = not empty(tcPackage)
		if llDependency
			select curPackages
			lnRecno = recno()
			locate for upper(Name) = upper(tcPackage)
			if not found()
				return
			endif not found()
		endif llDependency
		
		* Download the installer if necessary.
		
		if lower(left(curPackages.InstallURL, 4)) = 'http'
			lcInstaller = This.cWorkingFolder + justfname(trim(curPackages.InstallURL))
			lcURL       = trim(curPackages.InstallURL)
			lcLocalFile = lcInstaller
			loInternet = newobject('VFPXInternet', 'VFPXInternet.prg')
			llOK = loInternet.DownloadFile(lcURL, lcLocalFile)
			if not llOK
				messagebox(loInternet.cErrorMessage, 16, 'FoxGet')
				return .F.
			endif not llOK
		else
			lcInstaller = trim(curPackages.InstallURL)
		endif lower(left(curPackages.InstallURL, 4)) = 'http'
		
		* Run the installer.
		
		loInstaller = newobject(juststem(lcInstaller), lcInstaller)
		loInstaller.cPackageName = trim(curPackages.Name)
		loInstaller.cVersion     = trim(curPackages.Version)
		loInstaller.cInstaller   = lcInstaller
		bindevent(loInstaller, 'Update', This, 'Update')
		llOK = loInstaller.Install()
		if llOK
		
		* Now handle dependencies. Note that if a dependent package is already installed,
		* it'll be installed again.
		
			lnDependencies = alines(laDependencies, curPackages.Dependent)
			for each lcPackage in laDependencies foxobject
				if not empty(lcPackage)
					llOK = llOK and This.Install(lcPackage)
				endif not empty(lcPackage)
			next lcPackage
		
		* Refresh the packages list.
		
			if llOK
				This.GetPackages()
				This.Refresh()
			endif llOK
		endif llOK
		if llOK
			messagebox(loInstaller.cPackageName + ' was installed successfully.', 64, 'FoxGet')
		else
			messagebox(loInstaller.cPackageName + ' was not installed. ' + ;
				'The log file will be displayed.', 64, 'FoxGet')
			modify file (loInstaller.cLogFile) nowait
		endif llOK
		if llDependency
			go lnRecno in curPackages
		endif llDependency
		
	ENDPROC

	PROCEDURE uninstall		&& Uninstall the selected package
		* Uninstall the current or specified package.
		
		lparameters tlNoRefresh, ;
			tcPackage
		local llDependency, ;
			lnRecno, ;
			lcPackage, ;
			lcSource, ;
			lcInstaller, ;
			llOK, ;
			llUninstalled, ;
			loInstaller, ;
			lnDepRecno, ;
			laDependencies[1], ;
			lnDependencies, ;
			lcPackage
		
		* Find the specified package.
		
		llDependency = not empty(tcPackage)
		if llDependency
			select curPackages
			lnRecno = recno()
			locate for upper(Name) = upper(tcPackage)
			if not found()
				return
			endif not found()
		endif llDependency
		
		* Run the uninstaller. Note that we have to run it out of a temporary folder so we can delete
		* the package folder.
		
		lcPackage   = trim(curPackages.Name)
		lcSource    = This.cProjectFolder + 'Packages\' + addbs(lcPackage) + lcPackage + 'Installer.prg'
		lcInstaller = forcepath(lcSource, This.cWorkingFolder)
		if not file(lcSource)
			messagebox('The uninstaller (' + lcSource + ') does not exist.', 64, 'FoxGet')
			return .F.
		endif not file(lcSource)
		try
			copy file (lcSource) to (lcInstaller)
			llOK = .T.
		catch
		endtry
		llUninstalled = .T.
		if llOK
			loInstaller = newobject(juststem(lcInstaller), lcInstaller)
			loInstaller.cPackageName = lcPackage
			bindevent(loInstaller, 'Update', This, 'Update')
			if curPackages.RefCount = 1
				llOK = loInstaller.Uninstall()
			else
				loInstaller.UpdatePackages(.T.)
				llUninstalled = .F.
			endif curPackages.RefCount = 1
		
		* Uninstall dependencies.
		
			if llOK and not empty(curPackages.Dependent)
				lnDepRecno     = recno('curPackages')
				lnDependencies = alines(laDependencies, curPackages.Dependent)
				for each lcPackage in laDependencies foxobject
					if not empty(lcPackage)
						locate for Name = lcPackage
						llOK = llOK and This.Uninstall(.T., lcPackage)
					endif not empty(lcPackage)
				next lcPackage
				go lnDepRecno in curPackages
			endif llOK
		
		* Refresh the packages list.
		
			if llOK and not tlNoRefresh
				This.GetPackages()
				This.Refresh()
			endif llOK ...
		else
			messagebox('Cannot create working copy of uninstaller.', 16, 'FoxGet')
		endif llOK
		do case
			case not llOK
				messagebox(lcPackage + ' was not uninstalled. ' + ;
					'The log file will be displayed.', 64, 'FoxGet')
				modify file (This.cLogFile) nowait
			case llUninstalled
				messagebox(loInstaller.cPackageName + ' was uninstalled successfully.', 64, 'FoxGet')
		endcase
		if llDependency
			go lnRecno in curPackages
		endif llDependency
		return llOK
		
	ENDPROC

	PROCEDURE update		&& Displays the installation progress
		lparameters tcMessage
		This.edtProgress.Value = This.edtProgress.Value + tcMessage + chr(13)
		This.edtProgress.SelStart = len(This.edtProgress.Value)
		
	ENDPROC

	PROCEDURE chkShowOnlyInstalled.anychange
		Thisform.GetPackages()
		
	ENDPROC

	PROCEDURE cmdInstall.Click
		Thisform.Install()
		
	ENDPROC

	PROCEDURE cmdInstall.Refresh
		This.Caption = iif(empty(nvl(curPackages.InstalledDate, {})), 'Install', 'Reinstall')
		
	ENDPROC

	PROCEDURE cmdUninstall.Click
		Thisform.Uninstall()
		
	ENDPROC

	PROCEDURE cmdUninstall.Refresh
		local lnRecno, ;
			lcPackage, ;
			llDependent
		select curPackages
		lnRecno   = recno()
		lcPackage = upper(trim(curPackages.Name))
		locate for lcPackage $ upper(curPackages.Dependent) and ;
			not empty(nvl(curPackages.InstalledDate, {}))
		llDependent = found()
		go lnRecno
		This.Enabled = not empty(nvl(curPackages.InstalledDate, {})) and not llDependent
		
	ENDPROC

	PROCEDURE cmdUpdate.Click
		llOK = Thisform.Uninstall(.T.)
		if llOK
			Thisform.Install()
		endif llOK
		
	ENDPROC

	PROCEDURE cmdUpdate.Refresh
		This.Enabled = not empty(nvl(curPackages.InstalledDate, {})) and ;
			(curPackages.InstalledDate < curPackages.PubDate or ;
			(not empty(curPackages.InstalledVersion) and ;
				trim(curPackages.InstalledVersion) < trim(curPackages.Version)))
		
	ENDPROC

	PROCEDURE lblAuthor.Refresh
		This.Caption = curPackages.Author
		
	ENDPROC

	PROCEDURE lblDependencies.Refresh
		if empty(curPackages.Dependent)
			This.Caption = 'None'
		else
			This.Caption = Thisform.GetDependencies(curPackages.Dependent, '')
		endif empty(curPackages.Dependent)
		
	ENDPROC

	PROCEDURE lblHomeURL.Click
		ShellExecute(0, 'Open', This.Caption, '', '', 1)
	ENDPROC

	PROCEDURE lblHomeURL.Refresh
		This.Caption = curPackages.HomeURL
		
	ENDPROC

	PROCEDURE lblInstalledDate.Refresh
		This.Caption = iif(empty(nvl(curPackages.InstalledDate, {})), 'Not installed', transform(curPackages.InstalledDate))
		
	ENDPROC

	PROCEDURE lblInstalledVersion.Refresh
		This.Caption = iif(empty(nvl(curPackages.InstalledDate, {})), 'Not installed', curPackages.InstalledVersion)
		
	ENDPROC

	PROCEDURE lblPubDate.Refresh
		This.Caption = transform(curPackages.PubDate)
		
	ENDPROC

	PROCEDURE lblVersion.Refresh
		This.Caption = curPackages.Version
		
	ENDPROC

	PROCEDURE lstPackages.anychange
		select curPackages
		locate for Name = This.DisplayValue
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE txtSearch.anychange
		Thisform.GetPackages()
		
	ENDPROC

ENDDEFINE
