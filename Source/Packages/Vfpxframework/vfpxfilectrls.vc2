*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="vfpxfilectrls.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS vfpxdirectory AS vfpxbasecontainer OF "vfpxbaselibrary.vcx" 		&& A container with a label, textbox, and button for a directory
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblFolder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFolder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetFolder" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adjustcontrols		&& Adjusts the control positions
		*m: cdirectory_access
		*m: cdirectory_assign
		*m: clabelcaption_assign
		*m: folderchanged		&& Fired when the folder is changed interactively
		*m: ldisplaylabel_assign
		*m: validation		&& Allows validation
		*m: value_access
		*m: value_assign
		*m: width_assign
		*m: _pemeditor_resize		&& Design-time resize event
		*p: ccaption		&& The caption for the GETDIR() dialog
		*p: ccontrolsource		&& The item this control's value is bound to
		*p: cdirectory		&& The directory
		*p: clabelcaption		&& The caption to use for the label
		*p: ctext		&& The text for the GETDIR() dialog
		*p: ladjustpositions		&& .T. if we should adjust the positions of the controls
		*p: ldisplaylabel		&& .T. to display the label
		*p: value		&& The value of the control
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 10
		builder = VFPXDirectoryBuilder.prg
		ccaption = Select Directory
		ccontrolsource = 
		cdirectory = 
		clabelcaption = 
		ctext = 
		Height = 23
		ladjustpositions = .T.
		ldisplaylabel = .T.
		Name = "vfpxdirectory"
		value = 
		Width = 343
		_memberdata = <VFPData>
			<memberdata name="ccaption" type="property" display="cCaption" favorites="True"/>
			<memberdata name="ccontrolsource" type="property" display="cControlSource" favorites="True"/>
			<memberdata name="cdirectory" type="property" display="cDirectory"/>
			<memberdata name="cdirectory_access" type="method" display="cDirectory_Access"/>
			<memberdata name="cdirectory_assign" type="method" display="cDirectory_Assign"/>
			<memberdata name="ladjustpositions" type="property" display="lAdjustPositions" favorites="True"/>
			<memberdata name="validation" type="method" display="Validation" favorites="True"/>
			<memberdata name="clabelcaption" type="property" display="cLabelCaption"/>
			<memberdata name="clabelcaptiion" type="property" display="cLabelCaptiion"/>
			<memberdata name="value" type="property" display="Value"/>
			<memberdata name="value_access" type="method" display="Value_Access"/>
			<memberdata name="value_assign" type="method" display="Value_Assign"/>
			<memberdata name="ctext" type="property" display="cText"/>
			<memberdata name="clabelcaption_assign" type="method" display="cLabelCaption_Assign"/>
			<memberdata name="_pemeditor_resize" display="_PEMEditor_Resize"/>
			<memberdata name="adjustcontrols" display="AdjustControls"/>
			<memberdata name="folderchanged" display="FolderChanged"/>
			<memberdata name="width" display="Width"/>
			<memberdata name="width_assign" display="Width_Assign"/>
			<memberdata name="ldisplaylabel" display="lDisplayLabel"/>
			<memberdata name="ldisplaylabel_assign" display="lDisplayLabel_Assign"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdGetFolder' AS vfpxgetdir WITH ;
		Anchor = 8, ;
		cafterdone = This.Parent.Validation(), ;
		cresult = This.Parent.cDirectory, ;
		Left = 320, ;
		Name = "cmdGetFolder", ;
		TabStop = .F.
		*< END OBJECT: ClassLib="vfpxfilectrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblFolder' AS vfpxbaselabel WITH ;
		Caption = "Directory", ;
		Name = "lblFolder", ;
		Top = 3
		*< END OBJECT: ClassLib="vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'txtFolder' AS vfpxbasetextbox WITH ;
		Anchor = 10, ;
		Left = 55, ;
		MaxLength = 254, ;
		Name = "txtFolder", ;
		Width = 265
		*< END OBJECT: ClassLib="vfpxbaselibrary.vcx" BaseClass="textbox" />
	
	PROCEDURE adjustcontrols		&& Adjusts the control positions
		* Set the caption of the label if we need to and adjust the control position to
		* account for the size of the caption. Note that if the form isn't visible, the
		* label isn't automatically resized at this time, so we need to manually
		* calculate its width.
		
		lparameters tlForce
		local loSFGDI
		with This
			if not empty(.cLabelCaption) and ;
				(not .lblFolder.Caption == .cLabelCaption or tlForce)
				.lblFolder.Caption = .cLabelCaption
				if not Thisform.Visible
					loSFGDI        = newobject('SFGDIMeasureString', ;
						'SFGDIMeasureString.prg')
					.lblFolder.Width = loSFGDI.GetWidth(.lblFolder.Caption, ;
						.lblFolder.FontName, .lblFolder.FontSize, ;
						iif(.lblFolder.FontBold, 'B', ''))
				endif not Thisform.Visible
				if .lAdjustPositions
					.txtFolder.lSaveAnchor    = .T.
					.txtFolder.Left           = .lblFolder.Width + 5
					.txtFolder.Width          = .Width - .txtFolder.Left - ;
						.cmdGetFolder.Width
					.txtFolder.lSaveAnchor    = .F.
					.cmdGetFolder.lSaveAnchor = .T.
					.cmdGetFolder.Left        = .txtFolder.Left + .txtFolder.Width
					.cmdGetFolder.lSaveAnchor = .F.
				endif .lAdjustPositions
			endif not empty(.cLabelCaption) ...
		endwith
		
	ENDPROC

	PROCEDURE buildercode
		* Adapted from VFPXDirectoryBuilder.prg. To use, double-click the Builder property in
		* PEM Editor.
		
		lparameters toThis
		with toThis
			lcCaption = inputbox('Caption:', 'Directory Builder', .lblFolder.Caption)
			if not empty(lcCaption)
				.lblFolder.Caption = lcCaption
			endif not empty(lcCaption)
			.txtFolder.Left    = .lblFolder.Width + 5
			.cmdGetFolder.Left = .Width - .cmdGetFolder.Width
			.txtFolder.Width   = .cmdGetFolder.Left - .txtFolder.Left
		endwith
		
	ENDPROC

	PROCEDURE cdirectory_access
		return addbs(alltrim(This.txtFolder.Value))
		
	ENDPROC

	PROCEDURE cdirectory_assign
		lparameters tcDirectory
		local lcDirectory, ;
			lcProgram1, ;
			lcProgram2, ;
			lnPos, ;
			llChanged, ;
			lcAlias, ;
			lcField
		with This
			lcDirectory = alltrim(tcDirectory)
		
		* Update the Value of the textbox if we're not being called from it.
		
			lcProgram1 = program(program(-1) - 1)
			lcProgram2 = program(program(-1) - 2)
			if not 'TXTFOLDER.ANYCHANGE' $ lcProgram1 and ;
				not 'TXTFOLDER.ANYCHANGE' $ lcProgram2
				.txtFolder.Value = lcDirectory
			endif not 'TXTFOLDER.ANYCHANGE' $ lcProgram1 ...
		
		* Write the value to our ControlSource.
		
			if 'CMDGETFOLDER.CLICK' $ lcProgram2 or ;
				'TXTFOLDER.VALID' $ lcProgram1 or ;
				'CDIRECTORY_ASSIGN' $ lcProgram1
				lnPos = at('.', .cControlSource)
				if lnPos > 0 and not lcDirectory == alltrim(evaluate(.cControlSource))
					llChanged = .T.
					lcAlias   = left(.cControlSource, lnPos - 1)
					lcField   = substr(.cControlSource, lnPos + 1)
					if used(lcAlias)
						replace (lcField) with lcDirectory in (lcAlias)
					else
						store lcDirectory to (.cControlSource)
					endif used(lcAlias)
					raiseevent(This, 'FolderChanged')
				endif lnPos > 0 ...
			endif 'CDIRECTORY_ASSIGN' $ lcProgram1 ...
		
		* Update the TooltipText.
		
			try
				.txtFolder.TooltipText = displaypath(lcDirectory, 127)
			catch
			endtry
		endwith
		
	ENDPROC

	PROCEDURE clabelcaption_assign
		lparameters tuNewValue
		This.cLabelCaption = tuNewValue
		This.AdjustControls(.T.)
		
	ENDPROC

	PROCEDURE folderchanged		&& Fired when the folder is changed interactively
		* Abstract method
		
	ENDPROC

	PROCEDURE Init
		This.AdjustControls()
		dodefault()
		
	ENDPROC

	PROCEDURE ldisplaylabel_assign
		lparameters tlValue
		store tlValue to This.lDisplayLabel, This.lblFolder.Visible
		
	ENDPROC

	PROCEDURE LostFocus
		if not This.Validation()
			This.txtFolder.SetFocus()
		endif not This.Validation()
		
	ENDPROC

	PROCEDURE Refresh
		* If necessary, write the ControlSource's value to our cDirectory property.
		
		local lcDirectory
		with This
			if not empty(.cControlSource)
				lcDirectory = evaluate(.cControlSource)
				if not .cDirectory == lcDirectory
					.cDirectory = lcDirectory
				endif not .cDirectory == lcDirectory
			endif not empty(.cControlSource)
		endwith
		
	ENDPROC

	PROCEDURE validation		&& Allows validation
		* Abstract method
		
	ENDPROC

	PROCEDURE value_access
		return This.cDirectory
		
	ENDPROC

	PROCEDURE value_assign
		lparameters tuNewValue
		This.cDirectory = tuNewValue
		
	ENDPROC

	PROCEDURE width_assign
		* Adjust the width of the textbox and position of the commandbutton when the
		* width changes.
		
		lparameters tnValue
		This.Width = tnValue
		* This is a workaround for a VFP bug that fires the Assign method when the
		* width is accessed
		if type('This.cmdGetFolder.Name') = 'C'
			This.cmdGetFolder.Left = tnValue - This.cmdGetFolder.Width
			This.txtFolder.Width   = tnValue - This.txtFolder.Left - This.cmdGetFolder.Width
		endif type('This.cmdGetFolder.Name') = 'C'
		
	ENDPROC

	PROCEDURE _pemeditor_resize		&& Design-time resize event
		with This
			.txtFolder.Left    = .lblFolder.Width + 5
			.cmdGetFolder.Left = .Width - .cmdGetFolder.Width
			.txtFolder.Width   = .cmdGetFolder.Left - .txtFolder.Left
		endwith
		
	ENDPROC

	PROCEDURE cmdGetFolder.Click
		with This
			.cCaption    = .Parent.cCaption
			.cText       = .Parent.cText
			.cDefaultDir = '[' + .Parent.cDirectory + ']'
		endwith
		dodefault()
		
	ENDPROC

	PROCEDURE cmdGetFolder.Init
		This.cDefaultDir = '=' + This.cResult
		dodefault()
		
	ENDPROC

	PROCEDURE txtFolder.Valid
		* Update the cDirectory property.
		
		This.Parent.cDirectory = This.Value
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxfile AS vfpxbasecontainer OF "vfpxbaselibrary.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetFile" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adjustcontrols		&& Adjust the control positions
		*m: cfilename_access
		*m: cfilename_assign
		*m: clabelcaption_assign
		*m: filechanged		&& Fired when the filename is changed interactively
		*m: ldisplaylabel_assign
		*m: validation		&& Allows validation
		*m: value_access
		*m: value_assign
		*m: width_assign
		*m: _pemeditor_resize		&& Design-time resize event
		*p: ccaption		&& The value for cmdGetFile.cCaption
		*p: ccontrolsource		&& The item this control's value is bound to
		*p: cextensions		&& The value for cmdGetFile.cExtensions
		*p: cfilename		&& The filename
		*p: clabelcaption		&& The caption to use for the label
		*p: ladjustpositions		&& .T. if we should adjust the positions of the controls
		*p: ldisplaylabel		&& .T. to display the label
		*p: lsavedialog		&& .T. to use a Save dialog, .F. to use an Open dialog
		*p: value		&& The value of the control
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 10
		builder = VFPXFileBuilder.prg
		ccaption = 
		ccontrolsource = 
		cextensions = 
		cfilename = 
		clabelcaption = 
		Height = 23
		ladjustpositions = .T.
		ldisplaylabel = .T.
		lsavedialog = .F.
		Name = "vfpxfile"
		value = 
		Width = 343
		_memberdata = <VFPData>
			<memberdata name="ccaption" type="property" display="cCaption" favorites="True"/>
			<memberdata name="ccontrolsource" type="property" display="cControlSource" favorites="True"/>
			<memberdata name="cextensions" type="property" display="cExtensions" favorites="True"/>
			<memberdata name="cfilename" type="property" display="cFileName"/>
			<memberdata name="cfilename_access" type="method" display="cFileName_Access"/>
			<memberdata name="cfilename_assign" type="method" display="cFileName_Assign"/>
			<memberdata name="ladjustpositions" type="property" display="lAdjustPositions" favorites="True"/>
			<memberdata name="validation" type="method" display="Validation"/>
			<memberdata name="width_assign" type="method" display="Width_Assign"/>
			<memberdata name="clabelcaption" type="property" display="cLabelCaption"/>
			<memberdata name="value" type="property" display="Value"/>
			<memberdata name="value_access" type="method" display="Value_Access"/>
			<memberdata name="value_assign" type="method" display="Value_Assign"/>
			<memberdata name="filechanged" type="method" display="FileChanged"/>
			<memberdata name="clabelcaption_assign" type="method" display="cLabelCaption_Assign"/>
			<memberdata name="adjustcontrols" type="method" display="AdjustControls"/>
			<memberdata name="lsavedialog" type="property" display="lSaveDialog"/>
			<memberdata name="_pemeditor_resize" display="_PEMEditor_Resize"/>
			<memberdata name="ldisplaylabel" display="lDisplayLabel"/>
			<memberdata name="ldisplaylabel_assign" display="lDisplayLabel_Assign"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdGetFile' AS vfpxgetfile WITH ;
		Anchor = 8, ;
		cafterdone = This.Parent.Validation(), ;
		cresult = This.Parent.cFileName, ;
		Left = 320, ;
		Name = "cmdGetFile", ;
		TabStop = .F.
		*< END OBJECT: ClassLib="vfpxfilectrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblFile' AS vfpxbaselabel WITH ;
		Caption = "File", ;
		Name = "lblFile", ;
		Top = 3
		*< END OBJECT: ClassLib="vfpxbaselibrary.vcx" BaseClass="label" />

	ADD OBJECT 'txtFile' AS vfpxbasetextbox WITH ;
		Anchor = 10, ;
		Left = 30, ;
		MaxLength = 240, ;
		Name = "txtFile", ;
		Width = 290
		*< END OBJECT: ClassLib="vfpxbaselibrary.vcx" BaseClass="textbox" />
	
	PROCEDURE adjustcontrols		&& Adjust the control positions
		* Set the caption of the label if we need to and adjust the control position to
		* account for the size of the caption. Note that if the form isn't visible, the
		* label isn't automatically resized at this time, so we need to manually
		* calculate its width.
		
		lparameters tlForce
		local loSFGDI
		with This
			if not empty(.cLabelCaption) and ;
				(not .lblFile.Caption == .cLabelCaption or tlForce)
				.lblFile.Caption = .cLabelCaption
				if not Thisform.Visible
					loSFGDI        = newobject('SFGDIMeasureString', ;
						'SFGDIMeasureString.prg')
					.lblFile.Width = loSFGDI.GetWidth(.lblFile.Caption, ;
						.lblFile.FontName, .lblFile.FontSize, ;
						iif(.lblFile.FontBold, 'B', ''))
				endif not Thisform.Visible
				if .lAdjustPositions
					.txtFile.lSaveAnchor    = .T.
					.txtFile.Left           = iif(.lblFile.Visible, ;
						.lblFile.Width + 5, 0)
					.txtFile.Width          = .Width - .txtFile.Left - ;
						.cmdGetFile.Width
					.txtFile.lSaveAnchor    = .F.
					.cmdGetFile.lSaveAnchor = .T.
					.cmdGetFile.Left        = .txtFile.Left + .txtFile.Width
					.cmdGetFile.lSaveAnchor = .F.
				endif .lAdjustPositions
			endif not empty(.cLabelCaption) ...
		endwith
		
	ENDPROC

	PROCEDURE buildercode
		* Adapted from VFPXFileBuilder.prg. To use, double-click the Builder property in
		* PEM Editor.
		
		lparameters toThis
		with toThis
			lcCaption = inputbox('Caption:', 'File Builder', .lblFile.Caption)
			if not empty(lcCaption)
				.lblFile.Caption = lcCaption
			endif not empty(lcCaption)
			.txtFile.Left    = .lblFile.Width + 5
			.cmdGetFile.Left = .Width - .cmdGetFile.Width
			.txtFile.Width   = .cmdGetFile.Left - .txtFile.Left
		endwith
		
	ENDPROC

	PROCEDURE cfilename_access
		return alltrim(This.txtFile.Value)
		
	ENDPROC

	PROCEDURE cfilename_assign
		lparameters tcFileName
		local lcFileName, ;
			lcProgram1, ;
			lcProgram2, ;
			lnPos, ;
			lcAlias, ;
			lcField
		with This
			lcFileName = alltrim(tcFileName)
		
		* Update the Value of the textbox if we're not being called from it.
		
			lcProgram1 = program(program(-1) - 1)
			lcProgram2 = program(program(-1) - 2)
			if not 'TXTFILE.ANYCHANGE' $ lcProgram1 and ;
				not 'TXTFILE.ANYCHANGE' $ lcProgram2
				.txtFile.Value = lcFileName
			endif not 'TXTFILE.ANYCHANGE' $ lcProgram1 ...
		
		* Write the value to our ControlSource.
		
			if 'CMDGETFILE.CLICK' $ lcProgram2 or ;
				'TXTFILE.VALID' $ lcProgram1 or ;
				'CFILENAME_ASSIGN' $ lcProgram1
				lnPos = at('.', .cControlSource)
				if lnPos > 0 and not lcFileName == alltrim(evaluate(.cControlSource))
					lcAlias = left(.cControlSource, lnPos - 1)
					lcField = substr(.cControlSource, lnPos + 1)
					if used(lcAlias)
						replace (lcField) with lcFileName in (lcAlias)
					else
						store lcFileName to (.cControlSource)
					endif used(lcAlias)
					raiseevent(This, 'FileChanged')
				endif lnPos > 0 ...
			endif 'CMDGETFILE.CLICK' $ lcProgram2 ...
		
		* Update the TooltipText.
		
			try
				.txtFile.TooltipText = displaypath(lcFileName, 127)
			catch
			endtry
		endwith
		
	ENDPROC

	PROCEDURE clabelcaption_assign
		lparameters tuNewValue
		This.cLabelCaption = tuNewValue
		This.AdjustControls(.T.)
		
	ENDPROC

	PROCEDURE filechanged		&& Fired when the filename is changed interactively
		* Abstract method
		
	ENDPROC

	PROCEDURE Init
		This.AdjustControls()
		dodefault()
		
	ENDPROC

	PROCEDURE ldisplaylabel_assign
		lparameters tlValue
		store tlValue to This.lDisplayLabel, This.lblFile.Visible
		
	ENDPROC

	PROCEDURE LostFocus
		if not This.Validation()
			This.txtFile.SetFocus()
		endif not This.Validation()
		
	ENDPROC

	PROCEDURE Refresh
		* If necessary, write the ControlSource's value to our cFileName property.
		
		local lcFileName
		with This
			if not empty(.cControlSource)
				lcFileName = evaluate(.cControlSource)
				if not .cFileName == lcFileName
					.cFileName = lcFileName
				endif not .cFileName == lcFileName
			endif not empty(.cControlSource)
		endwith
		
	ENDPROC

	PROCEDURE validation		&& Allows validation
		* Abstract method
		
	ENDPROC

	PROCEDURE value_access
		return This.cFileName
		
	ENDPROC

	PROCEDURE value_assign
		lparameters tuNewValue
		This.cFileName = tuNewValue
		
	ENDPROC

	PROCEDURE width_assign
		* Adjust the width of the textbox and position of the commandbutton when the
		* width changes.
		
		lparameters tnValue
		This.Width = tnValue
		* This is a workaround for a VFP bug that fires the Assign method when the
		* width is accessed
		if type('This.cmdGetFile.Name') = 'C'
			This.cmdGetFile.Left = tnValue - This.cmdGetFile.Width
			This.txtFile.Width   = tnValue - This.txtFile.Left - This.cmdGetFile.Width
		endif type('This.cmdGetFile.Name') = 'C'
		
	ENDPROC

	PROCEDURE _pemeditor_resize		&& Design-time resize event
		with This
			.txtFile.Left    = .lblFile.Width + 5
			.cmdGetFile.Left = .Width - .cmdGetFile.Width
			.txtFile.Width   = .cmdGetFile.Left - .txtFile.Left
		endwith
		
	ENDPROC

	PROCEDURE cmdGetFile.Click
		local lcFileName
		with This
			.cCaption    = .Parent.cCaption
			.cExtensions = .Parent.cExtensions
			lcFileName   = .Parent.cFileName
			.lSaveDialog = .Parent.lSaveDialog
			dodefault()
			if not lcFileName == .Parent.cFileName
				raiseevent(This.Parent, 'FileChanged')
			endif not lcFileName == .Parent.cFileName
		endwith
		
	ENDPROC

	PROCEDURE txtFile.Valid
		* Update the cFileName property.
		
		This.Parent.cFileName = This.Value
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxgetdir AS vfpxbasecommandbutton OF "vfpxbaselibrary.vcx" 		&& A CommandButton that displays a GETDIR() dialog
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cafterdone		&& The name of a method or function to execute after GETDIR() has finished
		*p: ccaption		&& The caption for the GETDIR() dialog
		*p: cdefaultdir		&& The default directory to use
		*p: cresult		&& The location where to put the return value of GETDIR() (such as a control's Value property)
		*p: ctext		&& The text for the GETDIR() dialog
		*p: leditbox		&& .T. if an editbox should be displayed (only in VFP 7 and later)
		*p: lincludefiles		&& .T. to display files as well as folders (only in VFP 7 or later)
		*p: lusenewui		&& .T. if the Windows 2000 interface should be used (only in VFP 7 and later)
		*p: outility		&& A reference to an SFUtility object
	*</DefinedPropArrayMethod>

	PROTECTED outility
	*<PropValue>
		cafterdone = 
		Caption = "..."
		ccaption = 
		cdefaultdir = 
		cresult = 
		ctext = 
		Height = 23
		leditbox = .F.
		lincludefiles = .F.
		lusenewui = .T.
		Name = "vfpxlibrarygetdir"
		outility = .NULL.
		StatusBarText = "Select a folder"
		ToolTipText = "Select a folder"
		Width = 23
		_memberdata = <VFPData>
			<memberdata name="cafterdone" type="property" display="cAfterDone" favorites="True"/>
			<memberdata name="ccaption" type="property" display="cCaption" favorites="True"/>
			<memberdata name="cdefaultdir" type="property" display="cDefaultDir" favorites="True"/>
			<memberdata name="cresult" type="property" display="cResult" favorites="True"/>
			<memberdata name="ctext" type="property" display="cText" favorites="True"/>
			<memberdata name="leditbox" type="property" display="lEditbox" favorites="True"/>
			<memberdata name="lincludefiles" type="property" display="lIncludeFiles" favorites="True"/>
			<memberdata name="lusenewui" type="property" display="lUseNewUI" favorites="True"/>
			<memberdata name="outility" type="property" display="oUtility"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Click
		* Display a GETDIR() dialog, using parameters determined from the properties
		* of this object.
		
		local lcResult, ;
			lcOptions, ;
			lnFlags, ;
			lcDir
		with This
			assert not empty(.cResult) ;
				message 'SFGetDir: the result container was not defined.'
		
		* Build a string of parameters from the properties of this object.
		
			lcResult = .cResult
			do case
				case empty(.cDefaultDir)
					lcOptions = evaluate(lcResult)
				case left(.cDefaultDir, 1) = '='
					lcOptions = '[' + ;
						evaluate(alltrim(substr(.cDefaultDir, 2))) + ']'
				otherwise
					lcOptions = alltrim(.cDefaultDir)
			endcase
		
		* Support new options.
		
			#define BIF_RETURNONLYFSDIRS       1
			#define BIF_EDITBOX               16
			#define BIF_VALIDATE              32
			#define BIF_USENEWUI              64
			#define BIF_BROWSEINCLUDEFILES 16384
			lnFlags = 0
			if .lEditBox
				lnFlags = lnFlags + BIF_EDITBOX + BIF_VALIDATE
			endif .lEditBox
			if .lIncludeFiles
				lnFlags = lnFlags + BIF_BROWSEINCLUDEFILES
			endif .lIncludeFiles
			if .lUseNewUI
				lnFlags = lnFlags + BIF_USENEWUI
			endif .lUseNewUI
			if lnFlags > 0
				lnFlags = lnFlags + BIF_RETURNONLYFSDIRS
			endif lnFlags > 0
			lcOptions = lcOptions + iif(empty(lcOptions), '[]', '') + ',[' + .cText + ;
				'],[' + .cCaption + '],' + transform(lnFlags)
		
		* Use the GETDIR() function, and if a directory was selected, store the result
		* in the specified location. Convert to the proper case.
		
			lcDir = getdir(&lcOptions)
			if not empty(lcDir)
				lcDir = GetProperFileCase(lcDir, .T.)
				store lcDir to (lcResult)
			endif not empty(lcDir)
		
		* If a method or function was specified to execute after GETDIR(), do it.
		
			if not empty(.cAfterDone)
				evaluate(.cAfterDone)
			endif not empty(.cAfterDone)
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxgetfile AS vfpxbasecommandbutton OF "vfpxbaselibrary.vcx" 		&& A CommandButton that displays a GETFILE() dialog
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cafterdone		&& An expression to evaluate after the file has been selected
		*p: ccaption		&& The caption for the dialog
		*p: cextensions		&& The extensions parameter for GETFILE() (surround literal strings in quotes)
		*p: cfilename		&& The default filename
		*p: cresult		&& The location where to put the return value into
		*p: lsavedialog		&& .T. to use a Save dialog, .F. to use an Open dialog
	*</DefinedPropArrayMethod>

	*<PropValue>
		cafterdone = 
		Caption = "..."
		ccaption = 
		cextensions = 
		cfilename = 
		cresult = 
		Height = 23
		lsavedialog = .F.
		Name = "vfpxgetfile"
		StatusBarText = "Select a file and path"
		ToolTipText = "Select a file and path"
		Width = 23
		_memberdata = <VFPData>
			<memberdata name="cafterdone" type="property" display="cAfterDone" favorites="True"/>
			<memberdata name="ccaption" type="property" display="cCaption" favorites="True"/>
			<memberdata name="cextensions" type="property" display="cExtensions" favorites="True"/>
			<memberdata name="cresult" type="property" display="cResult" favorites="True"/>
			<memberdata name="lsavedialog" type="property" display="lSaveDialog"/>
			<memberdata name="cfilename" display="cFileName"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Click
		* Display an Open File dialog, using parameters determined from the properties
		* of this object.
		
		local lcResult, ;
			lcFileName
		with This
			assert not empty(.cResult) ;
				message 'VFPXGetFile: the result container was not defined.'
			lcResult   = .cResult
			lcFileName = GetFileName(.cExtensions, .cFileName, .cCaption, .lSaveDialog)
		
		* If the user chose a file, store the result in the specified location.
		
			if not empty(lcFileName)
				store lcFileName to (lcResult)
		
		* If a method or function was specified to execute after file selection, do it.
		
				if not empty(.cAfterDone)
					evaluate(.cAfterDone)
				endif not empty(.cAfterDone)
			endif not empty(lcFileName)
		endwith
		
	ENDPROC

ENDDEFINE
