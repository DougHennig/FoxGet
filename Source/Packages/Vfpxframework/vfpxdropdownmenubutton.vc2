*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="vfpxdropdownmenubutton.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS vfpxdropdownmenubutton AS vfpxbasecontainer OF "vfpxbaselibrary.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdMain" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMenu" UniqueID="" Timestamp="" />

	#INCLUDE "vfpxbaselibrary.h"
	*<DefinedPropArrayMethod>
		*m: buttonclicked		&& Called when the button is clicked
		*m: turnoffvisualeffects		&& Turns off visual effects
		*m: turnonvisualeffects		&& Turns on visual effects
		*p: lmenuactive		&& .T. when the menu is active
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 0
		Height = 24
		lmenuactive = .F.
		Name = "vfpxdropdownmenubutton"
		Width = 37
		_memberdata = <VFPData>
			<memberdata name="buttonclicked" type="method" display="ButtonClicked"/>
			<memberdata name="lmenuactive" type="property" display="lMenuActive"/>
			<memberdata name="turnoffvisualeffects" type="method" display="TurnOffVisualEffects"/>
			<memberdata name="turnonvisualeffects" type="method" display="TurnOnVisualEffects"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdMain' AS vfpxbasetoolbarbutton WITH ;
		Name = "cmdMain", ;
		SpecialEffect = 1
		*< END OBJECT: ClassLib="vfpxbaselibrary.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdMenu' AS vfpxdropdownmenutrigger WITH ;
		Left = 23, ;
		Name = "cmdMenu", ;
		SpecialEffect = 1
		*< END OBJECT: ClassLib="vfpxdropdownmenubutton.vcx" BaseClass="commandbutton" />
	
	PROCEDURE buttonclicked		&& Called when the button is clicked
	ENDPROC

	PROCEDURE Init
		* Set the tooltip of the components to ours.
		
		dodefault()
		with This
			store .ToolTipText   to .cmdMain.ToolTipText,   .cmdMenu.ToolTipText
			store .StatusBarText to .cmdMain.StatusBarText, .cmdMenu.StatusBarText
		endwith
		
	ENDPROC

	PROCEDURE shortcutmenu
		* Set the row and column for the menu.
		
		lparameters toMenu, ;
			tcObject
		local lnScaleMode, ;
			lnFoxelHeight, ;
			lnPixelHeight, ;
			lnScreenHeight, ;
			lnScreenWidth, ;
			lnScreenTop, ;
			lnScreenLeft, ;
			lnVFPTop, ;
			lnVFPLeft, ;
			lnTopRowDockOffset, ;
			lnLeftColDockOffset, ;
			lnVPosition, ;
			lnHPosition, ;
			lnRow, ;
			lnCol, ;
			lcForm, ;
			lnPixelWidth, ;
			lnFoxelWidth
		with This
		
		* Determine some scaling factors.
		
			lnScaleMode = _screen.ScaleMode
			if lnScaleMode = 0
				lnFoxelHeight     = _screen.Height
				_screen.ScaleMode = 3
			endif lnScaleMode = 0
			lnPixelHeight  = _screen.Height
			lnScreenHeight = _screen.Height
			lnScreenWidth  = _screen.Width
			lnScreenTop    = _screen.Top
			lnScreenLeft   = _screen.Left
			lnVFPTop       = _VFP.Top
			lnVFPLeft      = _VFP.Left
			if lnScaleMode = 3
				_screen.ScaleMode = 0
				lnFoxelHeight     = _screen.Height
			endif lnScaleMode = 3
			_screen.ScaleMode = lnScaleMode
		
		* Calculate some offset positions. The row offset is the based on the heights
		* of the menu bar, the title bar, and the window frame. The column offset is
		* based on the window frame width. The vertical and horizontal offsets combine
		* the form position with that of the cmdMain button.
		
			lnTopRowDockOffset  = lnScreenTop - lnVFPTop - sysmetric(9) - ;
				iif(version(2) = 2, sysmetric(20) + 2 * sysmetric(4), 0)
			lnLeftColDockOffset = lnScreenLeft - lnVFPLeft - sysmetric(4)
			lnVPosition         = objtoclient(.cmdMain, 1) + .Height
			lnHPosition         = objtoclient(.cmdMain, 2)
		
		* Get the row for the menu.
		
			do case
		
		* We're not in a toolbar, so we don't have any adjustments.
		
				case upper(Thisform.BaseClass) <> 'TOOLBAR'
					lnRow = lnVPosition
		
		* The toolbar isn't docked so handle the height of the toolbar title bar and
		* window borders.
		
				case not Thisform.Docked 
					lnRow = lnVPosition + sysmetric(34) + sysmetric(4) - 1
		
		* The toolbar is docked at the top.
		
				case Thisform.DockPosition = 0
					lnRow = max(lnVPosition - lnTopRowDockOffset - 1, 0)
		
		* The toolbar is docked at the bottom.
		
				case Thisform.DockPosition = 3
					lnRow = lnScreenHeight + lnVPosition - 1
		
		* The toolbar is docked at one of the sides.
		
		*** TODO: the menu is too far above or below the mouse pointer, depending on where the toolbar is docked.
				otherwise
					lnRow = lnVPosition
			endcase
		
		* Get the column for the menu.
		
			do case
		
		* We're not in a toolbar, so we don't have any adjustments.
		
				case upper(Thisform.BaseClass) <> 'TOOLBAR'
					lnCol = lnHPosition
		
		* The toolbar isn't docked, so handle the width of the toolbar window borders.
		
		*** TODO: the menu is too far to the left of the mouse pointer
				case not Thisform.Docked 
					lnCol = lnHPosition + sysmetric(3)
		
		* The toolbar is docked at the left.
		
		*** TODO: the menu is too far to the right of the mouse pointer
				case Thisform.DockPosition = 1
					lnCol = lnHPosition - lnLeftColDockOffset
		
		* The toolbar is docked at the right.
		
				case Thisform.DockPosition = 2
					lnCol = lnScreenWidth + Thisform.Left
		
		* The toolbar is docked at the top or bottom.
		
				otherwise
					lnCol = lnHPosition + Thisform.Left
			endcase
		
		* Because menu coordinates are in foxels, we need to get the conversion factors.
		
			if upper(Thisform.BaseClass) <> 'TOOLBAR'
				lcForm        = Thisform.Name
				lnPixelHeight = mrow(lcForm, 3)
				lnFoxelHeight = mrow(lcForm, 0)
			else
				lcForm = _screen.ActiveForm.Name
			endif upper(Thisform.BaseClass) <> 'TOOLBAR'
			lnPixelWidth  = mcol(lcForm, 3)
			lnFoxelWidth  = mcol(lcForm, 0)
		
		* Convert the menu position from pixels to foxels.
		
		*** TODO: this works for a toolbar at runtime but not in the IDE.
			toMenu.nRow = lnRow * lnFoxelHeight/lnPixelHeight
			toMenu.nCol = lnCol * lnFoxelWidth /lnPixelWidth
		endwith
		return
		
	ENDPROC

	PROCEDURE showmenu
		* Ensure the menu is refreshed every time because the drop down list may
		* change.
		
		if vartype(This.oMenu) = 'O'
			This.oMenu.Clear()
		endif vartype(This.oMenu) = 'O'
		dodefault()
		
		* Turn off visual effects after the menu has closed.
		
		This.TurnOffVisualEffects()
		
	ENDPROC

	PROCEDURE turnoffvisualeffects		&& Turns off visual effects
		with This
			.cmdMenu.VisualEffect = 0
			.cmdMain.VisualEffect = 0
		endwith
		
	ENDPROC

	PROCEDURE turnonvisualeffects		&& Turns on visual effects
		with This
			.cmdMenu.VisualEffect = 1
			.cmdMain.VisualEffect = 1
		endwith
		
	ENDPROC

	PROCEDURE cmdMain.Click
		* Turn off visual effects.
		
		This.Parent.TurnOffVisualEffects()
		
		* Call the ButtonClicked method, where custom code in a subclass will go.
		
		This.Parent.ButtonClicked()
		
	ENDPROC

	PROCEDURE cmdMain.MouseEnter
		* Turn on the visual effect of both buttons.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		with This.Parent
			if .Enabled
				.TurnOnVisualEffects()
			endif .Enabled
		endwith
		
	ENDPROC

	PROCEDURE cmdMain.MouseLeave
		* Turn off the visual effect of both buttons.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		with This.Parent
			if .Enabled
				.TurnOffVisualEffects()
			endif .Enabled
		endwith
		
	ENDPROC

	PROCEDURE cmdMenu.MouseDown
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		local llOK, ;
			loObject
		with This
			if tnButton = BUTTON_LEFT
				llOK = .T.
				do case
		
		* If the menu was displayed and we clicked on this button again, re-enable
		* the raised visual effect.
		
					case .VisualEffect = 0
						.Parent.TurnOnVisualEffects()
						llOK = .F.
		
		* Turn on the sunken visual effect.
		
					case .VisualEffect = 1
						.VisualEffect = 2
				endcase
		
		* Display the menu.
		
				if llOK
					.Parent.lMenuActive = .T.
					.Parent.ShowMenu()
					.Parent.lMenuActive = .F.
		
		* Turn off the visual effect for this button and the other one if the mouse
		* isn't over this button (this prevents flicker if the user clicks this
		* button again to hide the menu).
		
					.VisualEffect = 0
					try
						loObject = sys(1270)
						if vartype(loObject) <> 'O' or not loObject.Name == This.Name
							.Parent.cmdMain.VisualEffect = 0
						endif vartype(loObject) <> 'O' ...
					catch
					endtry
				endif llOK
			endif tnButton = BUTTON_LEFT
		endwith
		
	ENDPROC

	PROCEDURE cmdMenu.MouseEnter
		* Turn on the visual effect of both buttons.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		with This.Parent
			if .Enabled
				.TurnOnVisualEffects()
			endif .Enabled
		endwith
		
	ENDPROC

	PROCEDURE cmdMenu.MouseLeave
		* Turn off the visual effect of both buttons, but only if the menu isn't
		* active.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		with This.Parent
			if not .lMenuActive and .Enabled
				.TurnOffVisualEffects()
			endif not .lMenuActive ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxdropdownmenutrigger AS vfpxbasetoolbarbutton OF "vfpxbaselibrary.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "6"
		FontName = "Webdings"
		FontSize = 6
		Name = "sfdropdownmenutrigger"
		Width = 14
		_memberdata = <VFPData>
			<memberdata name="fontname_assign" type="method" display="FontName_Assign"/>
			<memberdata name="fontsize_assign" type="method" display="FontSize_Assign"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE fontname_assign
		* This prevents the font name from being changed since we need the font set in
		* the Property Window for this control to appear correctly.
		
		lparameters tcValue
		
	ENDPROC

	PROCEDURE fontsize_assign
		* This prevents the font size from being changed since we need the size set in
		* the Property Window for this control to appear correctly.
		
		lparameters tnValue
		
	ENDPROC

ENDDEFINE
