*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.21" SourceFile="vfpxpersistentform.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS vfpxpersist AS vfpxbasecustom OF "vfpxbaselibrary.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "vfpxregistry.h"
	*<DefinedPropArrayMethod>
		*m: restore		&& Restores the form's size and position
		*m: save		&& Saves the form's size and position
		*m: setwindowstate		&& Sets the window state of the form
		*p: nwindowstate		&& The window state for the form
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "vfpxpersist"
		nwindowstate = 0
		_memberdata = <VFPData>
			<memberdata name="restore" display="Restore"/>
			<memberdata name="setwindowstate" display="SetWindowState"/>
			<memberdata name="nwindowstate" display="nWindowState"/>
			<memberdata name="save" display="Save"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE restore		&& Restores the form's size and position
		* Restore the size and position.
		
		local loRegistry, ;
			lcKey, ;
			lnHeight, ;
			lnWidth, ;
			lnTop, ;
			lnLeft, ;
			lnWindowState, ;
			loMonitors, ;
			loSize, ;
			lnMaxLeft, ;
			lnMaxTop, ;
			lnMaxWidth, ;
			lnMaxHeight, ;
			lnMaxRight, ;
			lnMaxBottom, ;
			llTitleBar, ;
			lnBorderStyle, ;
			lnBorder, ;
			lnTotalWidth, ;
			lnVBorder, ;
			lnTotalHeight
		if pemstatus(Thisform, 'cRegistryKey', 5) and not empty(Thisform.cRegistryKey)
			with Thisform
				loRegistry    = newobject('VFPXRegistry', 'VFPXRegistry.vcx')
				lcKey         = .cRegistryKey
				lnHeight      = loRegistry.GetKey(lcKey, 'Height')
				lnWidth       = loRegistry.GetKey(lcKey, 'Width')
				lnTop         = loRegistry.GetKey(lcKey, 'Top')
				lnLeft        = loRegistry.GetKey(lcKey, 'Left')
				lnWindowState = loRegistry.GetKey(lcKey, 'WindowState')
				if vartype(lnHeight) = 'C'
					lnHeight      = .Height
					lnWidth       = .Width
					lnTop         = .Top
					lnLeft        = .Left
					lnWindowState = .WindowState
				endif vartype(lnHeight) = 'C'
				This.nWindowState = lnWindowState
		
		* For desktop or dockable forms, get the size of the virtual desktop. If
		* there's only one monitor, use the primary monitor size. Otherwise, use the
		* size of whichever monitor the form is on.
		
				loMonitors = newobject('SFMonitors', 'SFMonitors.prg')
				if .Dockable = 1 or .Desktop or .ShowWindow = 2
					if loMonitors.nMonitors = 1
						loSize = loMonitors
					else
						loSize = loMonitors.GetMonitorSize(lnLeft, lnTop)
					endif loMonitors.nMonitors = 1
					lnMaxLeft   = loSize.nLeft
					lnMaxTop    = loSize.nTop
					lnMaxWidth  = loSize.nWidth
					lnMaxHeight = loSize.nHeight
					lnMaxRight  = loSize.nRight
					lnMaxBottom = loSize.nBottom
		
		* For any other forms, use the size of _screen.
		
				else
					lnMaxLeft   = 0
					lnMaxTop    = 0
					lnMaxWidth  = _screen.Width
					lnMaxHeight = _screen.Height
					lnMaxRight  = lnMaxWidth
					lnMaxBottom = lnMaxHeight
				endif .Dockable = 1 ...
				do case
		
		* If we restored the properties, ensure the form isn't moved or sized outside
		* the desktop boundaries. Only restore Height and Width if the form is
		* resizable.
		
					case lnTop <> .Top or lnLeft <> .Left or lnHeight <> .Height or ;
						lnWidth <> .Width
						llTitleBar    = .TitleBar = 1
						lnBorderStyle = .BorderStyle
						if lnBorderStyle = 3
							.Width  = min(max(lnWidth,  0, .MinWidth),  lnMaxWidth)
							.Height = min(max(lnHeight, 0, .MinHeight), lnMaxHeight)
						endif lnBorderStyle = 3
		
		* Calculate the total width of the form, including the window borders.
		
						if llTitleBar
							lnBorder = iif(lnBorderStyle = 3, sysmetric(3), ;
								sysmetric(12)) * 2
						else
							lnBorder = icase(lnBorderStyle = 0, 0, ;
								lnBorderStyle = 1, sysmetric(10), ;
								lnBorderStyle = 2, sysmetric(12), ;
								sysmetric(3)) * 2
						endif llTitleBar
						lnTotalWidth = .Width + lnBorder
						do case
		
		* If we're past the left edge, move it to the left edge.
		
							case lnLeft < lnMaxLeft
								.Left = lnMaxLeft
		
		* If we're past the right edge of the screen, move it to the right edge. We may
		* also need to adjust the width to ensure it fits on the monitor. Only do this
		* for a normal window; for maximized windows, we want to be at the former
		* position.
		
							case This.nWindowState = WINDOWSTATE_NORMAL and ;
								lnLeft + lnTotalWidth > lnMaxRight
								.Left = max(lnMaxRight - lnTotalWidth, lnMaxLeft)
								if .Left + lnTotalWidth > lnMaxRight
									try
										.Width = lnMaxRight - lnMaxLeft - lnBorder
									catch
									endtry
								endif .Left + lnTotalWidth > lnMaxRight
		
		* We're cool, so put it where it was last time. If this form has ShowWindow set
		* to 1-In Top-Level Form and the current top-level form is on a different
		* monitor than the saved position, do this code twice; the first time, it
		* gives a value that places the form on the wrong monitor but it works the
		* second time.
		
							otherwise
								.Left = lnLeft
								.Left = lnLeft
						endcase
		
		* Calculate the total height of the form, including the title bar and window
		* borders.
		
						if llTitleBar
							lnVBorder = sysmetric(9) + ;
								iif(lnBorderStyle = 3, sysmetric(4), sysmetric(13)) * 2
						else
							lnVBorder = icase(lnBorderStyle = 0, 0, ;
									lnBorderStyle = 1, sysmetric(11), ;
									lnBorderStyle = 2, sysmetric(13), ;
									sysmetric(4)) * 2
						endif llTitleBar
						lnTotalHeight = .Height + lnVBorder
						do case
		
		* If we're past the top edge, move it to the top edge.
		
							case lnTop < lnMaxTop
								.Top = lnMaxTop
		
		* If we're past the bottom edge of the screen, move it to the bottom edge. Note
		* that we have to account for the height of the title bar and top and bottom
		* window frame. Only do this for a normal window; for maximized windows, we
		* want to be at the former position.
		
							case This.nWindowState = WINDOWSTATE_NORMAL and ;
								lnTop + lnTotalHeight > lnMaxBottom
								.Top = max(lnMaxBottom - lnTotalHeight, lnMaxTop)
								if .Top + lnTotalHeight > lnMaxBottom
									try
										.Height = lnMaxBottom - lnMaxTop - lnVBorder
									catch
									endtry
								endif .Top + lnTotalHeight > lnMaxBottom
		
		* We're cool, so put it where it was last time.
		
							otherwise
								.Top = lnTop
						endcase
		
		* Bind the window's Activate event to our SetWindowState method; we have to set
		* the WindowState once the form is visible or it won't be maximized on the
		* correct monitor.
		
					if lnWindowState > 0 and This.nWindowState <> WINDOWSTATE_MINIMIZED
						bindevent(Thisform, 'Activate', This, 'SetWindowState')
					endif lnWindowState > 0 ...
		
		* If we didn't, force the form to AutoCenter if we're supposed to.
		
					otherwise
						.AutoCenter = .AutoCenter
				endcase
			endwith
		endif pemstatus(Thisform, 'cRegistryKey', 5) ....
		
	ENDPROC

	PROCEDURE save		&& Saves the form's size and position
		local loRegistry, ;
			lcKey
		if pemstatus(Thisform, 'cRegistryKey', 5) and not empty(Thisform.cRegistryKey)
			with Thisform
				loRegistry = newobject('VFPXRegistry', 'VFPXRegistry.vcx')
				lcKey      = .cRegistryKey
				loRegistry.SetKey(lcKey, 'Height',      .Height,      , cnREG_DWORD)
				loRegistry.SetKey(lcKey, 'Width',       .Width,       , cnREG_DWORD)
				loRegistry.SetKey(lcKey, 'Top',         .Top,         , cnREG_DWORD)
				loRegistry.SetKey(lcKey, 'Left',        .Left,        , cnREG_DWORD)
				loRegistry.SetKey(lcKey, 'WindowState', .WindowState, , cnREG_DWORD)
			endwith
		endif pemstatus(Thisform, 'cRegistryKey', 5) ...
		
	ENDPROC

	PROCEDURE setwindowstate		&& Sets the window state of the form
		Thisform.WindowState = This.nWindowState
		unbindevent(Thisform, 'Activate', This, 'SetWindowState')
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxpersistentform AS vfpxbaseform OF "vfpxbaselibrary.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oPersist" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cregistrykey		&& The key to use to persist the form's settings
	*</DefinedPropArrayMethod>

	*<PropValue>
		cregistrykey = 
		DoCreate = .T.
		Name = "vfpxpersistentform"
		_memberdata = <VFPData>
			<memberdata name="cregistrykey" display="cRegistryKey"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'oPersist' AS vfpxpersist WITH ;
		Left = 345, ;
		Name = "oPersist", ;
		Top = 5
		*< END OBJECT: ClassLib="vfpxpersistentform.vcx" BaseClass="custom" />
	
	PROCEDURE Destroy
		This.oPersist.Save()
		dodefault()
		
	ENDPROC

	PROCEDURE Init
		dodefault()
		This.oPersist.Restore()
		
	ENDPROC

ENDDEFINE
