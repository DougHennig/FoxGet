*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="vfpxbaselibrary.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS vfpxbasecheckbox AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: anychange		&& Fired on any change in value
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*m: updatecontrolsource		&& Updates the control source
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		Alignment = 0
		AutoSize = .T.
		BackStyle = 0
		Caption = "Check1"
		FontName = "Segoe UI"
		Height = 17
		lsaveanchor = .F.
		Name = "vfpxbasecheckbox"
		nsavedanchor = 0
		omenu = .NULL.
		Value = .F.
		Width = 57
		_memberdata = <VFPData>
			<memberdata name="anychange" display="AnyChange"/>
			<memberdata name="updatecontrolsource" display="UpdateControlSource"/>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE anychange		&& Fired on any change in value
		* Abstract method
		
	ENDPROC

	PROCEDURE InteractiveChange
		* Update the control source in case something binding to our AnyChange event
		* looks at it.
		
		This.UpdateControlSource()
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE KeyPress
		* Prevent Ctrl-0 from inserting a null value.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
			nodefault
		endif tnKeyCode = asc('0') ...
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		* Call a common method for handling changes.
		
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE updatecontrolsource		&& Updates the control source
		local lnPos, ;
			lcAlias, ;
			lcField
		with This
			lnPos = at('.', .ControlSource)
			if lnPos > 0 and not .Value == evaluate(.ControlSource)
				lcAlias = left(.ControlSource, lnPos - 1)
				lcField = substr(.ControlSource, lnPos + 1)
				if used(lcAlias)
					replace (lcField) with .Value in (lcAlias)
				else
					store .Value to (.ControlSource)
				endif used(lcAlias)
			endif lnPos > 0 ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasecombobox AS combobox 		&& Base class for ComboBox objects
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		*m: lsaveanchor_assign
		*m: release		&& Releases the object
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*m: updatecontrolsource		&& Updates the control source
		*p: laddnewitemtolist		&& .T. to add user-typed values to the list
		*p: lrequeryoninit		&& .T. to call Requery from Init
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*a: aitems[1,0]		&& An array that can hold the values used for the ComboBox when RowSourceType is 5
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		BoundTo = .T.
		FontName = "Segoe UI"
		ItemTips = .T.
		laddnewitemtolist = .F.
		lrequeryoninit = .T.
		lsaveanchor = .F.
		Name = "vfpxbasecombobox"
		nsavedanchor = 0
		omenu = .NULL.
		RowSource = "This.aItems"
		RowSourceType = 5
		SelectOnEntry = .T.
		Style = 2
		_memberdata = <VFPData>
			<memberdata name="about" type="method" display="About"/>
			<memberdata name="aitems" type="property" display="aItems"/>
			<memberdata name="release" type="method" display="Release"/>
			<memberdata name="lsaveanchor" type="property" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" type="property" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" type="property" display="nSavedAnchor"/>
			<memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/>
			<memberdata name="anychange" display="AnyChange" favorites="True"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu" favorites="True"/>
			<memberdata name="lrequeryoninit" display="lRequeryOnInit" favorites="True"/>
			<memberdata name="laddnewitemtolist" display="lAddNewItemToList"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		* Abstract method
		
	ENDPROC

	PROCEDURE Init
		with This
		
		* Initialize aItems to a blank string if it's empty.
		
			if vartype(.aItems[1]) = 'L'
				.aItems = ''
			endif vartype(.aItems[1]) = 'L'
		
		* Call Requery() if we're supposed to.
		
			if .lRequeryOnInit
				.Requery()
			endif .lRequeryOnInit
		endwith
		
	ENDPROC

	PROCEDURE InteractiveChange
		* Update the control source in case something binding to our AnyChange event
		* looks at it.
		
		This.UpdateControlSource()
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE KeyPress
		* Prevent Ctrl-0 from inserting a null value.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
			nodefault
		endif tnKeyCode = asc('0') ...
		
		* Prevent backspace from leaving the control.
		
		if tnKeyCode = 127 and This.SelStart = 0 and This.SelLength = 0
		   nodefault
		endif tnKeyCode = 127 ...
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		* Call a common method for handling changes.
		
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE release		&& Releases the object
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE updatecontrolsource		&& Updates the control source
		local lnPos, ;
			lcAlias, ;
			lcField
		with This
			lnPos = at('.', .ControlSource)
			if lnPos > 0 and not .Value == evaluate(.ControlSource)
				lcAlias = left(.ControlSource, lnPos - 1)
				lcField = substr(.ControlSource, lnPos + 1)
				if used(lcAlias)
					replace (lcField) with .Value in (lcAlias)
				else
					store .Value to (.ControlSource)
				endif used(lcAlias)
			endif lnPos > 0 ...
		endwith
		
	ENDPROC

	PROCEDURE Valid
		* If the user typed a new value, add it to the list if we're supposed to.
		
		local lnItems, ;
			lnCols
		if This.Style = 0 and This.lAddNewItemToList and ;
			This.RowSourceType = 5 and This.RowSource = 'This.aItems' and ;
			ascan(This.aItems, This.DisplayValue) = 0
			lnItems = iif(empty(This.aItems[1]), 0, alen(This.aItems)) + 1
			lnCols  = alen(This.aItems, 2)
			if lnCols = 0
				dimension This.aItems[lnItems]
				This.aItems[lnItems] = This.DisplayValue
			else
				dimension This.aItems[lnItems, alen(This.aItems, 2)]
				This.aItems[lnItems, 1] = This.DisplayValue
			endif lnCols = 0
			asort(This.aItems)
			This.Requery()
			This.Value = This.DisplayValue
		endif This.Style = 0 ...
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasecommandbutton AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		Caption = "Command1"
		FontName = "Segoe UI"
		Height = 27
		lsaveanchor = .F.
		Name = "vfpxbasecommandbutton"
		nsavedanchor = 0
		omenu = .NULL.
		Width = 84
		_memberdata = <VFPData>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasecontainer AS container 		&& Base class for Container objects
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: buildercode		&& Code for a self-contained builder; see notes in the method for instructions
		*m: enabled_assign
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: builder		&& Tells Builder.app the name of a specific builder to use for this class (specified as Library,Class) or double-click to call code in BuilderCode *** .BuilderCode(loObject)
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		Anchor = 15
		BackStyle = 0
		BorderWidth = 0
		builder = 
		lsaveanchor = .F.
		Name = "vfpxbasecontainer"
		nsavedanchor = 0
		omenu = .NULL.
		_memberdata = <VFPData>
			<memberdata name="about" type="method" display="About"/>
			<memberdata name="enabled_assign" type="method" display="Enabled_Assign"/>
			<memberdata name="lsaveanchor" type="property" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" type="property" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" type="property" display="nSavedAnchor"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu" favorites="True"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
			<memberdata name="builder" display="Builder"/>
			<memberdata name="buildercode" display="BuilderCode"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE buildercode		&& Code for a self-contained builder; see notes in the method for instructions
		* This method can hold self-contained builder code. To use it, fill in this
		* method with code that accepts a parameter (a reference to this object) and
		* uses that parameter to reference to the object (you can't use "This" because
		* the code will actually be copied to a script PRG and executed there). Then
		* simply double-click the Builder property in PEM Editor to invoke the builder.
		
		lparameters toThis
		
	ENDPROC

	PROCEDURE enabled_assign
		* Enable or disable member objects.
		
		lparameters tlEnabled
		This.SetAll('Enabled', tlEnabled)
		This.Enabled = tlEnabled
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
		*==============================================================================
		* Method:			ShortcutMenu
		* Status:			Public
		* Purpose:			Populates the specified menu object
		* Author:			Doug Hennig
		* Last revision:	03/28/2023
		* Parameters:		toMenu   - an object reference to a menu object
		*					tcObject - the name of the variable containing the object
		*						reference to this object
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	additional items were added to the menu
		*==============================================================================
		
		lparameters toMenu, ;
			tcObject
		
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasecustom AS custom 		&& Base class for Custom objects
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: cleanup		&& Cleans up member references when the object is released or destroyed
		*m: release		&& Releases the object
		*m: releasemembers		&& Abstract method to nuke member references
		*p: cerrormessage		&& The message of an error
		*p: lrelease		&& .T. as the object is being released
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED lrelease
	*<PropValue>
		cerrormessage = 
		lrelease = .F.
		Name = "vfpxbasecustom"
		Width = 17
		_memberdata = <VFPData>
			<memberdata name="about" type="method" display="About"/>
			<memberdata name="cerrormessage" type="property" display="cErrorMessage"/>
			<memberdata name="cleanup" type="method" display="Cleanup"/>
			<memberdata name="lerroroccurred" type="property" display="lErrorOccurred"/>
			<memberdata name="lrelease" type="property" display="lRelease"/>
			<memberdata name="release" type="method" display="Release"/>
			<memberdata name="onformchange" type="method" display="OnFormChange"/>
			<memberdata name="releasemembers" display="ReleaseMembers" favorites="True"/>
		</VFPData>
	*</PropValue>
	
	PROTECTED PROCEDURE cleanup		&& Cleans up member references when the object is released or destroyed
		* Cleanup as the object is destroyed.
		
		if This.lRelease
			return .F.
		endif This.lRelease
		This.lRelease = .T.
		This.ReleaseMembers()
		
	ENDPROC

	PROCEDURE Destroy
		* Cleanup as the object is destroyed.
		
		This.Cleanup()
	ENDPROC

	PROCEDURE release		&& Releases the object
		* Release the object. Note the avoidance of "with This" in this code to prevent
		* potential problems with dangling object references.
		
		if This.lRelease
			nodefault
			return .F.
		endif This.lRelease
		This.Cleanup()
		release This
		
	ENDPROC

	PROCEDURE releasemembers		&& Abstract method to nuke member references
		* Abstract method
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaseeditbox AS editbox 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*m: updatecontrolsource		&& Updates the control source
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		Anchor = 15
		FontName = "Segoe UI"
		Height = 53
		lsaveanchor = .F.
		Name = "vfpxbaseeditbox"
		nsavedanchor = 0
		omenu = .NULL.
		SelectOnEntry = .T.
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="updatecontrolsource" display="UpdateControlSource"/>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="anychange" display="AnyChange"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		* Abstract method
		
	ENDPROC

	PROCEDURE InteractiveChange
		* Update the control source in case something binding to our AnyChange event
		* looks at it.
		
		This.UpdateControlSource()
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE KeyPress
		* Prevent Ctrl-0 from inserting a null value.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
			nodefault
		endif tnKeyCode = asc('0') ...
		
		* Prevent backspace from leaving the control.
		
		if tnKeyCode = 127 and This.SelStart = 0 and This.SelLength = 0
		   nodefault
		endif tnKeyCode = 127 ...
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		* Call a common method for handling changes.
		
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
		*==============================================================================
		* Method:			ShortcutMenu
		* Status:			Public
		* Purpose:			Populates the specified menu object
		* Author:			Doug Hennig
		* Last revision:	03/28/2023
		* Parameters:		toMenu   - an object reference to a menu object
		*					tcObject - the name of the variable containing the object
		*						reference to this object
		* Returns:			.T.
		* Environment in:	oLocalizer may contain a reference to a localization object
		* Environment out:	additional items were added to the menu
		*==============================================================================
		
		lparameters toMenu, ;
			tcObject
		local lcCut, ;
			lcCopy, ;
			lcPaste, ;
			lcClear, ;
			lcSelect
		if type('oLocalizer.Name') = 'C'
			lcCut    = oLocalizer.GetLocalizedString('MENU_CUT')
			lcCopy   = oLocalizer.GetLocalizedString('MENU_COPY')
			lcPaste  = oLocalizer.GetLocalizedString('MENU_PASTE')
			lcClear  = oLocalizer.GetLocalizedString('MENU_CLEAR')
			lcSelect = oLocalizer.GetLocalizedString('MENU_SELECT_ALL')
		else
			lcCut    = 'Cu\<t'
			lcCopy   = '\<Copy'
			lcPaste  = '\<Paste'
			lcClear  = 'Cle\<ar'
			lcSelect = 'Se\<lect All'
		endif type('oLocalizer.Name') = 'C'
		with toMenu
			.AddBar(lcCut, ;
				"sys(1500, '_MED_CUT',   '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'CutXPSmall.bmp', ;
				'_med_cut')
			.AddBar(lcCopy, ;
				"sys(1500, '_MED_COPY',  '_MEDIT')", ;
				, ;
				'CopyXPSmall.bmp', ;
				'_med_copy')
			.AddBar(lcPaste, ;
				"sys(1500, '_MED_PASTE', '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'PasteXPSmall.bmp', ;
				'_med_paste')
			.AddBar(lcClear, ;
				"sys(1500, '_MED_CLEAR', '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'_med_clear', ;
				'_med_clear')
			.AddSeparatorBar()
			.AddBar(lcSelect, ;
				"sys(1500, '_MED_SLCTA', '_MEDIT')", ;
				, ;
				'_med_slcta', ;
				'_med_slcta')
		endwith
		
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE updatecontrolsource		&& Updates the control source
		local lnPos, ;
			lcAlias, ;
			lcField
		with This
			lnPos = at('.', .ControlSource)
			if lnPos > 0 and not .Value == evaluate(.ControlSource)
				lcAlias = left(.ControlSource, lnPos - 1)
				lcField = substr(.ControlSource, lnPos + 1)
				if used(lcAlias)
					replace (lcField) with .Value in (lcAlias)
				else
					store .Value to (.ControlSource)
				endif used(lcAlias)
			endif lnPos > 0 ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaseform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: cregistrykey		&& The Registry key used for persisting settings
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		AllowOutput = .F.
		AutoCenter = .T.
		BackColor = 255,255,255
		Caption = "Form"
		cregistrykey = 
		Desktop = .T.
		DoCreate = .T.
		FontName = "Segoe UI"
		KeyPreview = .T.
		MaxButton = .F.
		MinButton = .F.
		Name = "vfpxbaseform"
		omenu = .NULL.
		ShowTips = .T.
		ShowWindow = 1
		_memberdata = <VFPData>
			<memberdata name="cregistrykey" display="cRegistryKey"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE KeyPress
		* Close the form on Esc.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = 27
			This.Release()
		endif tnKeyCode = 27
		
	ENDPROC

	PROCEDURE Load
		* If we're using a private datasession, set the environment.
		
		if This.DataSession = 2
			set ansi        off
			set bell        off			&& not datasession-specific
			set compatible  off			&& not datasession-specific
			set cpdialog    off			&& not datasession-specific
			set deleted     on
			set exact       off
			set exclusive   off
			set fullpath    on			&& not datasession-specific
			set multilocks  on
			set near        off
			set notify      off			&& not datasession-specific
			set nulldisplay to ''		&& not datasession-specific
			set safety      off
			set tableprompt off
			set talk        off
			set unique      off
				
		* Set CENTURY after SYSFORMATS, since SYSFORMATS changes CENTURY.
				
			set sysformats on
			set century    on
		endif This.DataSession = 2
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasegrid AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: buildercode		&& Code for a self-contained builder; see notes in the method for instructions
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: builder		&& Tells Builder.app the name of a specific builder to use for this class (specified as Library,Class) or double-click to call code in BuilderCode *** .BuilderCode(loObject)
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		AllowHeaderSizing = .F.
		AllowRowSizing = .F.
		Anchor = 15
		builder = VFPXGridBuilder.prg
		DeleteMark = .F.
		FontName = "Segoe UI"
		Height = 200
		lsaveanchor = .F.
		Name = "vfpxbasegrid"
		nsavedanchor = 0
		omenu = .NULL.
		RecordMark = .F.
		SplitBar = .F.
		Width = 320
		_memberdata = <VFPData>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
			<memberdata name="builder" display="Builder"/>
			<memberdata name="buildercode" display="BuilderCode"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE buildercode		&& Code for a self-contained builder; see notes in the method for instructions
		* This method can hold self-contained builder code. To use it, fill in this
		* method with code that accepts a parameter (a reference to this object) and
		* uses that parameter to reference to the object (you can't use "This" because
		* the code will actually be copied to a script PRG and executed there). Then
		* simply double-click the Builder property in PEM Editor to invoke the builder.
		
		lparameters toThis
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaseimage AS image 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata
	*</DefinedPropArrayMethod>

	*<PropValue>
		BackStyle = 0
		Height = 17
		Name = "vfpxbaseimage"
		omenu = .NULL.
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
		lparameters toMenu, ;
			tcObject
		
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaselabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		AutoSize = .T.
		BackStyle = 0
		Caption = "Label1"
		FontName = "Segoe UI"
		Height = 17
		lsaveanchor = .F.
		Name = "vfpxbaselabel"
		nsavedanchor = 0
		omenu = .NULL.
		Width = 36
		_memberdata = <VFPData>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaseline AS line 
 	*< CLASSDATA: Baseclass="line" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		lsaveanchor = .F.
		Name = "vfpxbaseline"
		nsavedanchor = 0
		omenu = .NULL.
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="shortcutmenu" type="method" display="ShortcutMenu" favorites="True"/>
			<memberdata name="showmenu" type="method" display="ShowMenu"/>
			<memberdata name="lsaveanchor" type="property" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" type="property" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" type="property" display="nSavedAnchor"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaselistbox AS listbox 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: anychange		&& Fired on any change in value
		*m: lsaveanchor_assign
		*m: release		&& Releases the object
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*m: updatecontrolsource		&& Updates the control source
		*p: lrequeryoninit		&& .T. to call Requery from Init
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*a: aitems[1,0]		&& An array of items for the list
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		BoundTo = .T.
		FontName = "Segoe UI"
		Height = 170
		IntegralHeight = .T.
		ItemTips = .T.
		lrequeryoninit = .T.
		lsaveanchor = .F.
		Name = "vfpxbaselistbox"
		nsavedanchor = 0
		omenu = .NULL.
		RowSource = "This.aItems"
		RowSourceType = 5
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="aitems" display="aItems"/>
			<memberdata name="anychange" display="AnyChange"/>
			<memberdata name="release" display="Release"/>
			<memberdata name="updatecontrolsource" display="UpdateControlSource"/>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
			<memberdata name="lrequeryoninit" display="lRequeryOnInit"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE anychange		&& Fired on any change in value
		* Abstract method.
		
	ENDPROC

	PROCEDURE Init
		with This
		
		* Initialize aItems to a blank string if it's empty.
		
			if vartype(.aItems[1]) = 'L'
				.aItems = ''
			endif vartype(.aItems[1]) = 'L'
		
		* Call Requery() if we're supposed to.
		
			if .lRequeryOnInit
				.Requery()
			endif .lRequeryOnInit
		endwith
		
	ENDPROC

	PROCEDURE InteractiveChange
		This.AnyChange()
		
	ENDPROC

	PROCEDURE KeyPress
		* Prevent Ctrl-0 from inserting a null value.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
			nodefault
		endif tnKeyCode = asc('0') ...
		
		* Prevent backspace from leaving the control.
		
		if tnKeyCode = 127 and This.SelStart = 0 and This.SelLength = 0
		   nodefault
		endif tnKeyCode = 127 ...
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		This.AnyChange()
		
	ENDPROC

	PROCEDURE release		&& Releases the object
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE updatecontrolsource		&& Updates the control source
		local lnPos, ;
			lcAlias, ;
			lcField
		with This
			lnPos = at('.', .ControlSource)
			if lnPos > 0 and not .Value == evaluate(.ControlSource)
				lcAlias = left(.ControlSource, lnPos - 1)
				lcField = substr(.ControlSource, lnPos + 1)
				if used(lcAlias)
					replace (lcField) with .Value in (lcAlias)
				else
					store .Value to (.ControlSource)
				endif used(lcAlias)
			endif lnPos > 0 ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaseoptionbutton AS optionbutton 
 	*< CLASSDATA: Baseclass="optionbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		AutoSize = .T.
		BackStyle = 0
		Caption = "Option1"
		FontName = "Segoe UI"
		Height = 17
		Name = "vfpxbaseoptionbutton"
		Width = 61
	*</PropValue>
	
	PROCEDURE KeyPress
		* Prevent Ctrl-0 from inserting a null value.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
			nodefault
		endif tnKeyCode = asc('0') ...
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaseoptiongroup AS optiongroup 
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*m: updatecontrolsource		&& Updates the control source
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		AutoSize = .T.
		BackStyle = 0
		BorderStyle = 0
		ButtonCount = 2
		Height = 46
		lsaveanchor = .F.
		MemberClass = "vfpxbaseoptionbutton"
		MemberClassLibrary = vfpxbaselibrary.vcx
		Name = "vfpxbaseoptiongroup"
		nsavedanchor = 0
		omenu = .NULL.
		Value = 0
		Width = 71
		_memberdata = <VFPData>
			<memberdata name="anychange" display="AnyChange"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="updatecontrolsource" display="UpdateControlSource"/>
			<memberdata name="omenu" display="oMenu"/>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
		</VFPData>
		Vfpxbaseoptionbutton1.Left = 5
		Vfpxbaseoptionbutton1.Name = "Vfpxbaseoptionbutton1"
		Vfpxbaseoptionbutton1.Top = 5
		Vfpxbaseoptionbutton2.Left = 5
		Vfpxbaseoptionbutton2.Name = "Vfpxbaseoptionbutton2"
		Vfpxbaseoptionbutton2.Top = 24
	*</PropValue>
	
	PROCEDURE anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		* Abstract method
		
	ENDPROC

	PROCEDURE InteractiveChange
		* Update the control source in case something binding to our AnyChange event
		* looks at it.
		
		This.UpdateControlSource()
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		* Call a common method for handling changes.
		
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE updatecontrolsource		&& Updates the control source
		local lnPos, ;
			lcAlias, ;
			lcField
		with This
			lnPos = at('.', .ControlSource)
			if lnPos > 0 and not .Value == evaluate(.ControlSource)
				lcAlias = left(.ControlSource, lnPos - 1)
				lcField = substr(.ControlSource, lnPos + 1)
				if used(lcAlias)
					replace (lcField) with .Value in (lcAlias)
				else
					store .Value to (.ControlSource)
				endif used(lcAlias)
			endif lnPos > 0 ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasepage AS page 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: enabled_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BackStyle = 0
		Caption = "Page"
		FontName = "Segoe UI"
		Height = 190
		Name = "vfpxbasepage"
		omenu = .NULL.
		Width = 190
		_memberdata = <VFPData>
			<memberdata name="enabled" display="Enabled"/>
			<memberdata name="enabled_assign" display="Enabled_Assign"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Activate
		This.Refresh()
		
	ENDPROC

	PROCEDURE enabled_assign
		* If the page is enabled or disabled, do the same for every control on the page
		* so they appear enabled or disabled.
		
		lparameters tlEnabled
		with This
			.SetAll('Enabled', tlEnabled)
			.Enabled = tlEnabled
		endwith
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasepageframe AS pageframe 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		Anchor = 15
		ErasePage = .T.
		Height = 254
		lsaveanchor = .F.
		MemberClass = "vfpxbasepage"
		MemberClassLibrary = vfpxbaselibrary.vcx
		Name = "vfpxbasepageframe"
		nsavedanchor = 0
		omenu = .NULL.
		PageCount = 1
		TabStyle = 1
		_memberdata = <VFPData>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
		Vfpxbasepage1.Name = "Vfpxbasepage1"
	*</PropValue>
	
	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbaseshape AS shape 		&& The base class for all Shape objects
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		BackStyle = 0
		lsaveanchor = .F.
		Name = "vfpxbaseshape"
		nsavedanchor = 0
		omenu = .NULL.
		SpecialEffect = 0
		_memberdata = <VFPData>
			<memberdata name="about" type="method" display="About"/>
			<memberdata name="release" type="method" display="Release"/>
			<memberdata name="shortcutmenu" type="method" display="ShortcutMenu" favorites="True"/>
			<memberdata name="showmenu" type="method" display="ShowMenu"/>
			<memberdata name="nsavedanchor" type="property" display="nSavedAnchor"/>
			<memberdata name="lsaveanchor" type="property" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" type="property" display="lSaveAnchor_Assign"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasespinner AS spinner 
 	*< CLASSDATA: Baseclass="spinner" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*m: updatecontrolsource		&& Updates the control source
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		FontName = "Segoe UI"
		lsaveanchor = .F.
		Name = "vfpxbasespinner"
		nsavedanchor = 0
		omenu = .NULL.
		SelectOnEntry = .T.
		Width = 50
		_memberdata = <VFPData>
			<memberdata name="updatecontrolsource" display="UpdateControlSource"/>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="anychange" display="AnyChange"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		* Abstract method
		
	ENDPROC

	PROCEDURE InteractiveChange
		* Update the control source in case something binding to our AnyChange event
		* looks at it.
		
		This.UpdateControlSource()
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		* Call a common method for handling changes.
		
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
		*==============================================================================
		* Method:			ShortcutMenu
		* Status:			Public
		* Purpose:			Populates the specified menu object
		* Author:			Doug Hennig
		* Last revision:	03/28/2023
		* Parameters:		toMenu   - an object reference to a menu object
		*					tcObject - the name of the variable containing the object
		*						reference to this object
		* Returns:			.T.
		* Environment in:	oLocalizer may contain a reference to a localization object
		* Environment out:	additional items were added to the menu
		*==============================================================================
		
		lparameters toMenu, ;
			tcObject
		local lcCut, ;
			lcCopy, ;
			lcPaste, ;
			lcClear, ;
			lcSelect
		if type('oLocalizer.Name') = 'C'
			lcCut    = oLocalizer.GetLocalizedString('MENU_CUT')
			lcCopy   = oLocalizer.GetLocalizedString('MENU_COPY')
			lcPaste  = oLocalizer.GetLocalizedString('MENU_PASTE')
			lcClear  = oLocalizer.GetLocalizedString('MENU_CLEAR')
			lcSelect = oLocalizer.GetLocalizedString('MENU_SELECT_ALL')
		else
			lcCut    = 'Cu\<t'
			lcCopy   = '\<Copy'
			lcPaste  = '\<Paste'
			lcClear  = 'Cle\<ar'
			lcSelect = 'Se\<lect All'
		endif type('oLocalizer.Name') = 'C'
		with toMenu
			.AddBar(lcCut, ;
				"sys(1500, '_MED_CUT',   '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'CutXPSmall.bmp', ;
				'_med_cut')
			.AddBar(lcCopy, ;
				"sys(1500, '_MED_COPY',  '_MEDIT')", ;
				, ;
				'CopyXPSmall.bmp', ;
				'_med_copy')
			.AddBar(lcPaste, ;
				"sys(1500, '_MED_PASTE', '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'PasteXPSmall.bmp', ;
				'_med_paste')
			.AddBar(lcClear, ;
				"sys(1500, '_MED_CLEAR', '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'_med_clear', ;
				'_med_clear')
			.AddSeparatorBar()
			.AddBar(lcSelect, ;
				"sys(1500, '_MED_SLCTA', '_MEDIT')", ;
				, ;
				'_med_slcta', ;
				'_med_slcta')
		endwith
		
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE updatecontrolsource		&& Updates the control source
		local lnPos, ;
			lcAlias, ;
			lcField
		with This
			lnPos = at('.', .ControlSource)
			if lnPos > 0 and not .Value == evaluate(.ControlSource)
				lcAlias = left(.ControlSource, lnPos - 1)
				lcField = substr(.ControlSource, lnPos + 1)
				if used(lcAlias)
					replace (lcField) with .Value in (lcAlias)
				else
					store .Value to (.ControlSource)
				endif used(lcAlias)
			endif lnPos > 0 ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasetextbox AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		*m: lsaveanchor_assign
		*m: shortcutmenu		&& Populates the shortcut menu
		*m: showmenu		&& Display a shortcut menu
		*m: updatecontrolsource		&& Updates the control source
		*p: lsaveanchor		&& This allows a container to use SetAll('lSaveAnchor') to save/reset and then restore Anchor when the form's size is changed but controls shouldn't move
		*p: nsavedanchor		&& The anchor value saved in lSaveAnchor_Assign
		*p: omenu		&& A reference to an SFMenuShortcutMenu object
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED nsavedanchor
	*<PropValue>
		FontName = "Segoe UI"
		Height = 23
		lsaveanchor = .F.
		Name = "vfpxbasetextbox"
		nsavedanchor = 0
		omenu = .NULL.
		SelectOnEntry = .T.
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="updatecontrolsource" display="UpdateControlSource"/>
			<memberdata name="lsaveanchor" display="lSaveAnchor"/>
			<memberdata name="lsaveanchor_assign" display="lSaveAnchor_Assign"/>
			<memberdata name="nsavedanchor" display="nSavedAnchor"/>
			<memberdata name="anychange" display="AnyChange"/>
			<memberdata name="shortcutmenu" display="ShortcutMenu"/>
			<memberdata name="showmenu" display="ShowMenu"/>
			<memberdata name="omenu" display="oMenu"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE anychange		&& Called from the InteractiveChange and ProgrammaticChange events to consolidate change code in one place
		* Abstract method
		
	ENDPROC

	PROCEDURE InteractiveChange
		* Update the control source in case something binding to our AnyChange event
		* looks at it.
		
		This.UpdateControlSource()
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE KeyPress
		* Prevent Ctrl-0 from inserting a null value.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
			nodefault
		endif tnKeyCode = asc('0') ...
		
		* Prevent backspace from leaving the control.
		
		if tnKeyCode = 127 and This.SelStart = 0 and This.SelLength = 0
		   nodefault
		endif tnKeyCode = 127 ...
		
	ENDPROC

	PROCEDURE lsaveanchor_assign
		lparameters tlSaveAnchor
		do case
			case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
			case tlSaveAnchor
				This.nSavedAnchor = This.Anchor
				This.Anchor       = 0
			otherwise
				This.Anchor = This.nSavedAnchor
		endcase
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		* Call a common method for handling changes.
		
		raiseevent(This, 'AnyChange')
		
	ENDPROC

	PROCEDURE RightClick
		* Display a right-click menu.
		
		This.ShowMenu()
		
	ENDPROC

	PROCEDURE shortcutmenu		&& Populates the shortcut menu
		*==============================================================================
		* Method:			ShortcutMenu
		* Status:			Public
		* Purpose:			Populates the specified menu object
		* Author:			Doug Hennig
		* Last revision:	03/28/2023
		* Parameters:		toMenu   - an object reference to a menu object
		*					tcObject - the name of the variable containing the object
		*						reference to this object
		* Returns:			.T.
		* Environment in:	oLocalizer may contain a reference to a localization object
		* Environment out:	additional items were added to the menu
		*==============================================================================
		
		lparameters toMenu, ;
			tcObject
		local lcCut, ;
			lcCopy, ;
			lcPaste, ;
			lcClear, ;
			lcSelect
		if type('oLocalizer.Name') = 'C'
			lcCut    = oLocalizer.GetLocalizedString('MENU_CUT')
			lcCopy   = oLocalizer.GetLocalizedString('MENU_COPY')
			lcPaste  = oLocalizer.GetLocalizedString('MENU_PASTE')
			lcClear  = oLocalizer.GetLocalizedString('MENU_CLEAR')
			lcSelect = oLocalizer.GetLocalizedString('MENU_SELECT_ALL')
		else
			lcCut    = 'Cu\<t'
			lcCopy   = '\<Copy'
			lcPaste  = '\<Paste'
			lcClear  = 'Cle\<ar'
			lcSelect = 'Se\<lect All'
		endif type('oLocalizer.Name') = 'C'
		with toMenu
			.AddBar(lcCut, ;
				"sys(1500, '_MED_CUT',   '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'CutXPSmall.bmp', ;
				'_med_cut')
			.AddBar(lcCopy, ;
				"sys(1500, '_MED_COPY',  '_MEDIT')", ;
				, ;
				'CopyXPSmall.bmp', ;
				'_med_copy')
			.AddBar(lcPaste, ;
				"sys(1500, '_MED_PASTE', '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'PasteXPSmall.bmp', ;
				'_med_paste')
			.AddBar(lcClear, ;
				"sys(1500, '_MED_CLEAR', '_MEDIT')", ;
				'not ' + tcObject + '.Enabled or ' + tcObject + '.ReadOnly', ;
				'_med_clear', ;
				'_med_clear')
			.AddSeparatorBar()
			.AddBar(lcSelect, ;
				"sys(1500, '_MED_SLCTA', '_MEDIT')", ;
				, ;
				'_med_slcta', ;
				'_med_slcta')
		endwith
		
	ENDPROC

	PROCEDURE showmenu		&& Display a shortcut menu
		local lcLibrary
		private loObject, ;
			loForm
		with This
		
		* Define reference to objects we might have menu items from in case the action
		* for a bar is to call a method of an object, which can't be done using "This.
		* Method" since "This" isn't applicable in a menu.
		
			loObject = This
			loForm   = Thisform
		
		* Define the menu if it hasn't already been defined.
		
			lcLibrary = 'SFMenu.vcx'
			if vartype(.oMenu) <> 'O' and file(lcLibrary)
				.oMenu = newobject('SFMenuShortcutMenu', lcLibrary, '', ;
					'loObject.oMenu')
			endif vartype(.oMenu) <> 'O' ...
			if vartype(.oMenu) = 'O'
		
		* If there aren't any bars in the menu, have the ShortcutMenu method populate
		* it.
		
				if .oMenu.Count = 0
					.ShortcutMenu(.oMenu, 'loObject')
				endif .oMenu.Count = 0
		
		* Activate the menu if necessary.
		
				if .oMenu.Count > 0
					.oMenu.Show()
				endif .oMenu.Count > 0
			endif vartype(.oMenu) = 'O' ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE updatecontrolsource		&& Updates the control source
		local lnPos, ;
			lcAlias, ;
			lcField
		with This
			lnPos = at('.', .ControlSource)
			if lnPos > 0 and not .Value == evaluate(.ControlSource)
				lcAlias = left(.ControlSource, lnPos - 1)
				lcField = substr(.ControlSource, lnPos + 1)
				if used(lcAlias)
					replace (lcField) with .Value in (lcAlias)
				else
					store .Value to (.ControlSource)
				endif used(lcAlias)
			endif lnPos > 0 ...
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vfpxbasetoolbarbutton AS vfpxbasecommandbutton OF "vfpxbaselibrary.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Caption = ""
		Height = 24
		Name = "vfpxbasetoolbarbutton"
		SpecialEffect = 2
		TabStop = .F.
		Width = 24
	*</PropValue>

ENDDEFINE
